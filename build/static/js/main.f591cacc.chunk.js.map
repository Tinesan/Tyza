{"version":3,"sources":["serviceWorker.ts","index.tsx","providers/AuthProvider.tsx","providers/DataProvider.tsx","providers/BasketProvider.tsx","generated/graphql.tsx","pages/ErrorBoundary/ErrorBoundary.tsx","providers/Apollo.tsx","routes/PrivateRoute.tsx","routes/AllRoutes.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","AuthContext","React","createContext","isAdmin","authData","undefined","setAuthData","AuthProvider","children","useState","authSessionLogin","sessionStorage","getItem","authDataSession","JSON","parse","authorities","includes","Provider","value","DataContext","products","categories","dataProviderLoading","refetchCategoriesAndProducts","sorterFunction","a","b","name","DataProvider","useCategoriesAndProductsQuery","data","refetch","loading","useMemo","listCategory","listProduct","BasketContext","totalPrice","deliveryPrice","basketValues","clearBasket","addBasketValue","deleteBasketValue","BasketProvider","useContext","setBasketValues","basketProductsIds","Object","keys","hasBasketItems","length","price","forEach","key","product","find","id","toFixed","basketValue","pV","copyBasketValues","AuthenticateDataFragmentDoc","gql","CategoryItemFragmentDoc","OrderContentItemFragmentDoc","ProductItemFragmentDoc","AuthenticateDocument","useAuthenticateQuery","baseOptions","Apollo","CallRequestDocument","useCallRequestQuery","CategoryDocument","useCategoryQuery","UpdateCategoryDocument","useUpdateCategoryMutation","AddNewCategoryDocument","useAddNewCategoryMutation","DeleteCategoryDocument","useDeleteCategoryMutation","CategoriesAndProductsDocument","PlaceOrderDocument","usePlaceOrderMutation","FindAllOrdersDocument","useFindAllOrdersQuery","AddNewProductDocument","useAddNewProductMutation","UpdateProductDocument","useUpdateProductMutation","AddNewImagesDocument","useAddNewImagesMutation","ProductDocument","useProductQuery","DeleteProductDocument","useDeleteProductMutation","ErrorBoundary","state","hasError","errorInfo","this","Container","Row","Col","props","_","Component","uploadLink","createUploadLink","uri","errorLink","onError","graphQLErrors","networkError","map","locations","path","log","client","authLink","setContext","headers","token","accessToken","authorization","ApolloClient","link","from","cache","InMemoryCache","useAppApolloClient","PrivateRoute","isAuth","rest","to","HomePageLazy","lazy","LoginPageLazy","AdminPageLazy","ModalRouterLazy","FallbackWrapper","styled","div","fallback","Spinner","animation","variant","AllRoutes","isModal","useLocation","modal","component","exact","LOCATION_PROTOKOL"],"mappings":"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","file":"static/js/main.f591cacc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { ReactNode, useState } from \"react\";\n\nimport { AuthenticateDataFragment } from \"generated/graphql\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const AuthContext = React.createContext<{\n  isAdmin: boolean;\n  authData?: AuthenticateDataFragment;\n  setAuthData: (authData: AuthenticateDataFragment) => void;\n}>({\n  isAdmin: false,\n  authData: undefined,\n  setAuthData: () => {},\n});\n\nconst AuthProvider = ({ children }: Props) => {\n  const [authData, setAuthData] = useState<\n    AuthenticateDataFragment | undefined\n  >(undefined);\n\n  const authSessionLogin = sessionStorage.getItem(\"login\");\n\n  if (authSessionLogin && !authData) {\n    const authDataSession = JSON.parse(authSessionLogin);\n    if (\"accessToken\" in authDataSession) {\n      setAuthData(authDataSession);\n    }\n  }\n\n  const isAdmin = !!authData?.authorities.includes(\"ROLE_ADMIN\");\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAdmin,\n        authData,\n        setAuthData,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n","import React, { ReactNode, useMemo } from \"react\";\n\nimport { CategoryItemFragment, ProductItemFragment, useCategoriesAndProductsQuery } from \"generated/graphql\";\n\ntype Props = {\n  children: ReactNode;\n};\n\ntype DataContext = {\n  dataProviderLoading: boolean;\n  products: ProductItemFragment[];\n  categories: CategoryItemFragment[];\n  refetchCategoriesAndProducts: () => any;\n};\n\nexport const DataContext = React.createContext<DataContext>({\n  products: [],\n  categories: [],\n  dataProviderLoading: false,\n  refetchCategoriesAndProducts: () => {},\n});\n\nexport function sorterFunction<T extends { name: string }>(a: T, b: T) {\n  if (a.name > b.name) {\n    return 1;\n  }\n  if (a.name < b.name) {\n    return -1;\n  }\n  return 0;\n}\n\nconst DataProvider = ({ children }: Props) => {\n  const { data, refetch, loading } = useCategoriesAndProductsQuery();\n  const { products, categories } = useMemo(() => {\n    if (data?.listCategory && data.listProduct) {\n      const { listCategory, listProduct } = data;\n      return {\n        products: listProduct,\n        categories: listCategory,\n      };\n    }\n    return { products: [], categories: [] };\n  }, [data]);\n\n  return (\n    <DataContext.Provider\n      value={{\n        products,\n        categories,\n        dataProviderLoading: loading,\n        refetchCategoriesAndProducts: refetch,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport default DataProvider;\n","import React, { ReactNode, useContext, useMemo, useState } from \"react\";\n\nimport { DataContext } from \"./DataProvider\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport type BasketValue = { [key in ID]: number };\n\ntype BasketContext = {\n  totalPrice: number;\n  deliveryPrice: number;\n  basketValues: BasketValue;\n  clearBasket: () => void;\n  deleteBasketValue: (id: ID) => void;\n  addBasketValue: (basketValue: BasketValue) => void;\n};\n\nexport const BasketContext = React.createContext<BasketContext>({\n  totalPrice: 0,\n  deliveryPrice: 0,\n  basketValues: {},\n  clearBasket: () => {},\n  addBasketValue: () => {},\n  deleteBasketValue: () => {},\n});\n\nconst BasketProvider = ({ children }: Props) => {\n  const { products } = useContext(DataContext);\n  const [basketValues, setBasketValues] = useState<BasketValue>({});\n\n  const addBasketValue = (basketValue: BasketValue) => {\n    setBasketValues((pV) => ({ ...pV, ...basketValue }));\n  };\n\n  const deleteBasketValue = (id: ID) => {\n    if (basketValues[id]) {\n      const copyBasketValues = { ...basketValues };\n      delete copyBasketValues[id];\n      setBasketValues(copyBasketValues);\n    }\n  };\n\n  const totalPrice: number = useMemo(() => {\n    const basketProductsIds = Object.keys(basketValues);\n    const hasBasketItems: boolean = !!basketProductsIds.length;\n    let price = 0;\n    if (hasBasketItems) {\n      basketProductsIds.forEach((key) => {\n        const product = products.find(({ id }) => id === key);\n        if (product) {\n          price += product.price * basketValues[key];\n        }\n      });\n    }\n    return +price.toFixed(2);\n  }, [basketValues, products]);\n\n  const deliveryPrice: number = useMemo(() => {\n    if (totalPrice >= 40) {\n      return 0;\n    } else {\n      return 4;\n    }\n  }, [totalPrice]);\n\n  const clearBasket = () => {\n    setBasketValues({});\n  };\n\n  return (\n    <BasketContext.Provider\n      value={{\n        totalPrice,\n        clearBasket,\n        basketValues,\n        deliveryPrice,\n        addBasketValue,\n        deleteBasketValue,\n      }}\n    >\n      {children}\n    </BasketContext.Provider>\n  );\n};\n\nexport default BasketProvider;\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** Built-in java.math.BigDecimal */\n  BigDecimal: any;\n  Upload: any;\n};\n\n\nexport type CallRequestInput = {\n  name: Scalars['String'];\n  phone: Scalars['String'];\n};\n\nexport type CategoryDto = {\n  __typename?: 'CategoryDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type CategoryInputDto = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type CredentialsInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type CustomerDto = {\n  __typename?: 'CustomerDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  phone: Scalars['String'];\n  street: Scalars['String'];\n  house: Scalars['String'];\n  building: Scalars['String'];\n  frontDoor: Scalars['String'];\n  floor: Scalars['String'];\n  flat: Scalars['String'];\n};\n\nexport type CustomerInputDto = {\n  name: Scalars['String'];\n  phone: Scalars['String'];\n  street: Scalars['String'];\n  house: Scalars['String'];\n  building: Scalars['String'];\n  frontDoor: Scalars['String'];\n  floor: Scalars['String'];\n  flat: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /**\n   * catdog-service\n   *     product\n   */\n  saveNewProduct?: Maybe<ProductDto>;\n  updateProduct?: Maybe<ProductDto>;\n  deleteProduct: Payload;\n  /** productImage */\n  updateMainImageById?: Maybe<ProductDto>;\n  addNewImages?: Maybe<ProductDto>;\n  /** category */\n  saveNewCategory: CategoryDto;\n  updateCategory: CategoryDto;\n  deleteCategory: Payload;\n  /**\n   * catdog-order-service\n   *    product-order\n   */\n  placeOrder: ProductOrderDto;\n};\n\n\nexport type MutationSaveNewProductArgs = {\n  productInputDTO: ProductInputDto;\n};\n\n\nexport type MutationUpdateProductArgs = {\n  productId: Scalars['String'];\n  productInputDTO: ProductInputDto;\n};\n\n\nexport type MutationDeleteProductArgs = {\n  productId: Scalars['String'];\n};\n\n\nexport type MutationUpdateMainImageByIdArgs = {\n  imageId: Scalars['String'];\n  main: Scalars['Boolean'];\n};\n\n\nexport type MutationAddNewImagesArgs = {\n  images: Array<Scalars['Upload']>;\n  productId: Scalars['String'];\n};\n\n\nexport type MutationSaveNewCategoryArgs = {\n  categoryInputDTO: CategoryInputDto;\n};\n\n\nexport type MutationUpdateCategoryArgs = {\n  categoryId: Scalars['String'];\n  categoryInputDTO: CategoryInputDto;\n};\n\n\nexport type MutationDeleteCategoryArgs = {\n  categoryId: Scalars['String'];\n};\n\n\nexport type MutationPlaceOrderArgs = {\n  productOrderInputDTO: ProductOrderInputDto;\n};\n\nexport type OAuth2AccessTokenDto = {\n  __typename?: 'OAuth2AccessTokenDTO';\n  accessToken: Scalars['String'];\n  tokenType: Scalars['String'];\n  refreshToken: Scalars['String'];\n  expiresIn: Scalars['Int'];\n  scope: Array<Scalars['String']>;\n  authenticationName: Scalars['String'];\n  authorities: Array<Scalars['String']>;\n  jti: Scalars['String'];\n};\n\nexport type PageProductOrderDto = {\n  __typename?: 'PageProductOrderDTO';\n  content: Array<ProductOrderDto>;\n  pageable: PageableDto;\n  totalPages: Scalars['Int'];\n  last: Scalars['Boolean'];\n  totalElements: Scalars['Int'];\n  first: Scalars['Boolean'];\n  number: Scalars['Int'];\n  sort: SortDto;\n  numberOfElements: Scalars['Int'];\n  size: Scalars['Int'];\n  empty: Scalars['Boolean'];\n};\n\nexport type PageableDto = {\n  __typename?: 'PageableDTO';\n  sort: SortDto;\n  pageNumber: Scalars['Int'];\n  pageSize: Scalars['Int'];\n  offset: Scalars['Int'];\n  paged: Scalars['Boolean'];\n  unpaged: Scalars['Boolean'];\n};\n\nexport type Payload = {\n  __typename?: 'Payload';\n  status: Scalars['Int'];\n};\n\nexport type ProductDto = {\n  __typename?: 'ProductDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description?: Maybe<Scalars['String']>;\n  stock: Scalars['Boolean'];\n  categoryId: Scalars['String'];\n  costPer: Scalars['String'];\n  images: Array<ProductImageDto>;\n  position: Scalars['Int'];\n};\n\nexport type ProductImageDto = {\n  __typename?: 'ProductImageDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  main: Scalars['Boolean'];\n  uri: Scalars['String'];\n  productId: Scalars['String'];\n  type: Scalars['String'];\n};\n\nexport type ProductInputDto = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description: Scalars['String'];\n  stock: Scalars['Boolean'];\n  categoryId: Scalars['String'];\n  costPer: Scalars['String'];\n  position: Scalars['Int'];\n};\n\nexport type ProductOrderDto = {\n  __typename?: 'ProductOrderDTO';\n  id: Scalars['String'];\n  customer: CustomerDto;\n  productOrderLines: Array<ProductOrderLineDto>;\n  orderStatus: Scalars['String'];\n  deliveryTime: Scalars['String'];\n  createdDate: Scalars['String'];\n  comment?: Maybe<Scalars['String']>;\n};\n\nexport type ProductOrderInputDto = {\n  customer: CustomerInputDto;\n  productOrderLines: Array<ProductOrderLineInputDto>;\n  deliveryTime: Scalars['String'];\n  comment?: Maybe<Scalars['String']>;\n};\n\nexport type ProductOrderLineDto = {\n  __typename?: 'ProductOrderLineDTO';\n  id: Scalars['String'];\n  productId: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description: Scalars['String'];\n  costPer: Scalars['String'];\n  orderQuantity: Scalars['Int'];\n};\n\nexport type ProductOrderLineInputDto = {\n  productId: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description: Scalars['String'];\n  costPer: Scalars['String'];\n  orderQuantity: Scalars['Int'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /**\n   * catdog-service\n   *     product\n   */\n  listProduct: Array<ProductDto>;\n  productById?: Maybe<ProductDto>;\n  /** category */\n  listCategory: Array<CategoryDto>;\n  categoryById: CategoryDto;\n  /** catdog-order-service */\n  findAllOrders: PageProductOrderDto;\n  /** authentication-service */\n  authenticate: OAuth2AccessTokenDto;\n  refreshToken: OAuth2AccessTokenDto;\n  /** telegram */\n  callRequest: Payload;\n};\n\n\nexport type QueryProductByIdArgs = {\n  productId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCategoryByIdArgs = {\n  categoryId: Scalars['String'];\n};\n\n\nexport type QueryFindAllOrdersArgs = {\n  page?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['String']>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryAuthenticateArgs = {\n  credentialsInput: CredentialsInput;\n};\n\n\nexport type QueryRefreshTokenArgs = {\n  refreshToken: Scalars['String'];\n};\n\n\nexport type QueryCallRequestArgs = {\n  callRequestInput?: Maybe<CallRequestInput>;\n};\n\nexport type SortDto = {\n  __typename?: 'SortDTO';\n  sorted: Scalars['Boolean'];\n  unsorted: Scalars['Boolean'];\n  empty: Scalars['Boolean'];\n};\n\n\nexport type AuthenticateDataFragment = (\n  { __typename?: 'OAuth2AccessTokenDTO' }\n  & Pick<OAuth2AccessTokenDto, 'tokenType' | 'accessToken' | 'authorities' | 'authenticationName'>\n);\n\nexport type AuthenticateQueryVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type AuthenticateQuery = (\n  { __typename?: 'Query' }\n  & { authenticate: (\n    { __typename?: 'OAuth2AccessTokenDTO' }\n    & AuthenticateDataFragment\n  ) }\n);\n\nexport type CallRequestQueryVariables = Exact<{\n  name: Scalars['String'];\n  phone: Scalars['String'];\n}>;\n\n\nexport type CallRequestQuery = (\n  { __typename?: 'Query' }\n  & { callRequest: (\n    { __typename?: 'Payload' }\n    & Pick<Payload, 'status'>\n  ) }\n);\n\nexport type CategoryItemFragment = (\n  { __typename?: 'CategoryDTO' }\n  & Pick<CategoryDto, 'id' | 'name' | 'description'>\n);\n\nexport type CategoryQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type CategoryQuery = (\n  { __typename?: 'Query' }\n  & { categoryById: (\n    { __typename?: 'CategoryDTO' }\n    & CategoryItemFragment\n  ) }\n);\n\nexport type UpdateCategoryMutationVariables = Exact<{\n  id: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type UpdateCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCategory: (\n    { __typename?: 'CategoryDTO' }\n    & Pick<CategoryDto, 'id'>\n  ) }\n);\n\nexport type AddNewCategoryMutationVariables = Exact<{\n  name: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type AddNewCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { saveNewCategory: (\n    { __typename?: 'CategoryDTO' }\n    & Pick<CategoryDto, 'id'>\n  ) }\n);\n\nexport type DeleteCategoryMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteCategory: (\n    { __typename?: 'Payload' }\n    & Pick<Payload, 'status'>\n  ) }\n);\n\nexport type CategoriesAndProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CategoriesAndProductsQuery = (\n  { __typename?: 'Query' }\n  & { listCategory: Array<(\n    { __typename?: 'CategoryDTO' }\n    & CategoryItemFragment\n  )>, listProduct: Array<(\n    { __typename?: 'ProductDTO' }\n    & ProductItemFragment\n  )> }\n);\n\nexport type PlaceOrderMutationVariables = Exact<{\n  comment: Scalars['String'];\n  deliveryTime: Scalars['String'];\n  customer: CustomerInputDto;\n  productOrderLines: Array<ProductOrderLineInputDto>;\n}>;\n\n\nexport type PlaceOrderMutation = (\n  { __typename?: 'Mutation' }\n  & { placeOrder: (\n    { __typename?: 'ProductOrderDTO' }\n    & Pick<ProductOrderDto, 'id'>\n  ) }\n);\n\nexport type OrderContentItemFragment = (\n  { __typename?: 'ProductOrderDTO' }\n  & Pick<ProductOrderDto, 'id' | 'deliveryTime' | 'createdDate'>\n  & { customer: (\n    { __typename?: 'CustomerDTO' }\n    & Pick<CustomerDto, 'id' | 'name' | 'phone' | 'street' | 'house' | 'building' | 'frontDoor' | 'floor' | 'flat'>\n  ), productOrderLines: Array<(\n    { __typename?: 'ProductOrderLineDTO' }\n    & Pick<ProductOrderLineDto, 'id' | 'productId' | 'name' | 'price' | 'description' | 'costPer' | 'orderQuantity'>\n  )> }\n);\n\nexport type FindAllOrdersQueryVariables = Exact<{\n  page?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['String']>;\n  sort?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindAllOrdersQuery = (\n  { __typename?: 'Query' }\n  & { findAllOrders: (\n    { __typename?: 'PageProductOrderDTO' }\n    & Pick<PageProductOrderDto, 'last' | 'first' | 'number' | 'totalPages' | 'totalElements'>\n    & { content: Array<(\n      { __typename?: 'ProductOrderDTO' }\n      & OrderContentItemFragment\n    )> }\n  ) }\n);\n\nexport type ProductItemFragment = (\n  { __typename?: 'ProductDTO' }\n  & Pick<ProductDto, 'id' | 'name' | 'stock' | 'price' | 'costPer' | 'position' | 'categoryId' | 'description'>\n  & { images: Array<(\n    { __typename?: 'ProductImageDTO' }\n    & Pick<ProductImageDto, 'id' | 'uri' | 'name' | 'main' | 'productId'>\n  )> }\n);\n\nexport type AddNewProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  position: Scalars['Int'];\n  stock: Scalars['Boolean'];\n  costPer: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  categoryId: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type AddNewProductMutation = (\n  { __typename?: 'Mutation' }\n  & { saveNewProduct?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & Pick<ProductDto, 'id'>\n  )> }\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  id: Scalars['String'];\n  name: Scalars['String'];\n  position: Scalars['Int'];\n  stock: Scalars['Boolean'];\n  costPer: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  categoryId: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProduct?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & Pick<ProductDto, 'id'>\n  )> }\n);\n\nexport type AddNewImagesMutationVariables = Exact<{\n  images: Array<Scalars['Upload']>;\n  productId: Scalars['String'];\n}>;\n\n\nexport type AddNewImagesMutation = (\n  { __typename?: 'Mutation' }\n  & { addNewImages?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & Pick<ProductDto, 'id'>\n    & { images: Array<(\n      { __typename?: 'ProductImageDTO' }\n      & Pick<ProductImageDto, 'id'>\n    )> }\n  )> }\n);\n\nexport type ProductQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type ProductQuery = (\n  { __typename?: 'Query' }\n  & { productById?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & ProductItemFragment\n  )> }\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteProduct: (\n    { __typename?: 'Payload' }\n    & Pick<Payload, 'status'>\n  ) }\n);\n\nexport const AuthenticateDataFragmentDoc = gql`\n    fragment AuthenticateData on OAuth2AccessTokenDTO {\n  tokenType\n  accessToken\n  authorities\n  authenticationName\n}\n    `;\nexport const CategoryItemFragmentDoc = gql`\n    fragment CategoryItem on CategoryDTO {\n  id\n  name\n  description\n}\n    `;\nexport const OrderContentItemFragmentDoc = gql`\n    fragment OrderContentItem on ProductOrderDTO {\n  id\n  deliveryTime\n  deliveryTime\n  createdDate\n  customer {\n    id\n    name\n    phone\n    street\n    house\n    building\n    frontDoor\n    floor\n    flat\n  }\n  productOrderLines {\n    id\n    productId\n    name\n    price\n    description\n    costPer\n    orderQuantity\n  }\n}\n    `;\nexport const ProductItemFragmentDoc = gql`\n    fragment ProductItem on ProductDTO {\n  id\n  name\n  stock\n  price\n  costPer\n  position\n  categoryId\n  description\n  images {\n    id\n    uri\n    name\n    main\n    productId\n  }\n}\n    `;\nexport const AuthenticateDocument = gql`\n    query authenticate($username: String!, $password: String!) {\n  authenticate(credentialsInput: {username: $username, password: $password}) {\n    ...AuthenticateData\n  }\n}\n    ${AuthenticateDataFragmentDoc}`;\n\n/**\n * __useAuthenticateQuery__\n *\n * To run a query within a React component, call `useAuthenticateQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthenticateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthenticateQuery({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useAuthenticateQuery(baseOptions?: Apollo.QueryHookOptions<AuthenticateQuery, AuthenticateQueryVariables>) {\n        return Apollo.useQuery<AuthenticateQuery, AuthenticateQueryVariables>(AuthenticateDocument, baseOptions);\n      }\nexport function useAuthenticateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuthenticateQuery, AuthenticateQueryVariables>) {\n          return Apollo.useLazyQuery<AuthenticateQuery, AuthenticateQueryVariables>(AuthenticateDocument, baseOptions);\n        }\nexport type AuthenticateQueryHookResult = ReturnType<typeof useAuthenticateQuery>;\nexport type AuthenticateLazyQueryHookResult = ReturnType<typeof useAuthenticateLazyQuery>;\nexport type AuthenticateQueryResult = Apollo.QueryResult<AuthenticateQuery, AuthenticateQueryVariables>;\nexport const CallRequestDocument = gql`\n    query callRequest($name: String!, $phone: String!) {\n  callRequest(callRequestInput: {name: $name, phone: $phone}) {\n    status\n  }\n}\n    `;\n\n/**\n * __useCallRequestQuery__\n *\n * To run a query within a React component, call `useCallRequestQuery` and pass it any options that fit your needs.\n * When your component renders, `useCallRequestQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCallRequestQuery({\n *   variables: {\n *      name: // value for 'name'\n *      phone: // value for 'phone'\n *   },\n * });\n */\nexport function useCallRequestQuery(baseOptions?: Apollo.QueryHookOptions<CallRequestQuery, CallRequestQueryVariables>) {\n        return Apollo.useQuery<CallRequestQuery, CallRequestQueryVariables>(CallRequestDocument, baseOptions);\n      }\nexport function useCallRequestLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CallRequestQuery, CallRequestQueryVariables>) {\n          return Apollo.useLazyQuery<CallRequestQuery, CallRequestQueryVariables>(CallRequestDocument, baseOptions);\n        }\nexport type CallRequestQueryHookResult = ReturnType<typeof useCallRequestQuery>;\nexport type CallRequestLazyQueryHookResult = ReturnType<typeof useCallRequestLazyQuery>;\nexport type CallRequestQueryResult = Apollo.QueryResult<CallRequestQuery, CallRequestQueryVariables>;\nexport const CategoryDocument = gql`\n    query Category($id: String!) {\n  categoryById(categoryId: $id) {\n    ...CategoryItem\n  }\n}\n    ${CategoryItemFragmentDoc}`;\n\n/**\n * __useCategoryQuery__\n *\n * To run a query within a React component, call `useCategoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCategoryQuery(baseOptions?: Apollo.QueryHookOptions<CategoryQuery, CategoryQueryVariables>) {\n        return Apollo.useQuery<CategoryQuery, CategoryQueryVariables>(CategoryDocument, baseOptions);\n      }\nexport function useCategoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoryQuery, CategoryQueryVariables>) {\n          return Apollo.useLazyQuery<CategoryQuery, CategoryQueryVariables>(CategoryDocument, baseOptions);\n        }\nexport type CategoryQueryHookResult = ReturnType<typeof useCategoryQuery>;\nexport type CategoryLazyQueryHookResult = ReturnType<typeof useCategoryLazyQuery>;\nexport type CategoryQueryResult = Apollo.QueryResult<CategoryQuery, CategoryQueryVariables>;\nexport const UpdateCategoryDocument = gql`\n    mutation UpdateCategory($id: String!, $name: String!, $description: String!) {\n  updateCategory(categoryId: $id, categoryInputDTO: {name: $name, description: $description}) {\n    id\n  }\n}\n    `;\nexport type UpdateCategoryMutationFn = Apollo.MutationFunction<UpdateCategoryMutation, UpdateCategoryMutationVariables>;\n\n/**\n * __useUpdateCategoryMutation__\n *\n * To run a mutation, you first call `useUpdateCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCategoryMutation, { data, loading, error }] = useUpdateCategoryMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useUpdateCategoryMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>) {\n        return Apollo.useMutation<UpdateCategoryMutation, UpdateCategoryMutationVariables>(UpdateCategoryDocument, baseOptions);\n      }\nexport type UpdateCategoryMutationHookResult = ReturnType<typeof useUpdateCategoryMutation>;\nexport type UpdateCategoryMutationResult = Apollo.MutationResult<UpdateCategoryMutation>;\nexport type UpdateCategoryMutationOptions = Apollo.BaseMutationOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>;\nexport const AddNewCategoryDocument = gql`\n    mutation AddNewCategory($name: String!, $description: String!) {\n  saveNewCategory(categoryInputDTO: {name: $name, description: $description}) {\n    id\n  }\n}\n    `;\nexport type AddNewCategoryMutationFn = Apollo.MutationFunction<AddNewCategoryMutation, AddNewCategoryMutationVariables>;\n\n/**\n * __useAddNewCategoryMutation__\n *\n * To run a mutation, you first call `useAddNewCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNewCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNewCategoryMutation, { data, loading, error }] = useAddNewCategoryMutation({\n *   variables: {\n *      name: // value for 'name'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useAddNewCategoryMutation(baseOptions?: Apollo.MutationHookOptions<AddNewCategoryMutation, AddNewCategoryMutationVariables>) {\n        return Apollo.useMutation<AddNewCategoryMutation, AddNewCategoryMutationVariables>(AddNewCategoryDocument, baseOptions);\n      }\nexport type AddNewCategoryMutationHookResult = ReturnType<typeof useAddNewCategoryMutation>;\nexport type AddNewCategoryMutationResult = Apollo.MutationResult<AddNewCategoryMutation>;\nexport type AddNewCategoryMutationOptions = Apollo.BaseMutationOptions<AddNewCategoryMutation, AddNewCategoryMutationVariables>;\nexport const DeleteCategoryDocument = gql`\n    mutation DeleteCategory($id: String!) {\n  deleteCategory(categoryId: $id) {\n    status\n  }\n}\n    `;\nexport type DeleteCategoryMutationFn = Apollo.MutationFunction<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\n\n/**\n * __useDeleteCategoryMutation__\n *\n * To run a mutation, you first call `useDeleteCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCategoryMutation, { data, loading, error }] = useDeleteCategoryMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCategoryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>) {\n        return Apollo.useMutation<DeleteCategoryMutation, DeleteCategoryMutationVariables>(DeleteCategoryDocument, baseOptions);\n      }\nexport type DeleteCategoryMutationHookResult = ReturnType<typeof useDeleteCategoryMutation>;\nexport type DeleteCategoryMutationResult = Apollo.MutationResult<DeleteCategoryMutation>;\nexport type DeleteCategoryMutationOptions = Apollo.BaseMutationOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\nexport const CategoriesAndProductsDocument = gql`\n    query CategoriesAndProducts {\n  listCategory {\n    ...CategoryItem\n  }\n  listProduct {\n    ...ProductItem\n  }\n}\n    ${CategoryItemFragmentDoc}\n${ProductItemFragmentDoc}`;\n\n/**\n * __useCategoriesAndProductsQuery__\n *\n * To run a query within a React component, call `useCategoriesAndProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesAndProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesAndProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCategoriesAndProductsQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>) {\n        return Apollo.useQuery<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>(CategoriesAndProductsDocument, baseOptions);\n      }\nexport function useCategoriesAndProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>) {\n          return Apollo.useLazyQuery<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>(CategoriesAndProductsDocument, baseOptions);\n        }\nexport type CategoriesAndProductsQueryHookResult = ReturnType<typeof useCategoriesAndProductsQuery>;\nexport type CategoriesAndProductsLazyQueryHookResult = ReturnType<typeof useCategoriesAndProductsLazyQuery>;\nexport type CategoriesAndProductsQueryResult = Apollo.QueryResult<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>;\nexport const PlaceOrderDocument = gql`\n    mutation PlaceOrder($comment: String!, $deliveryTime: String!, $customer: CustomerInputDTO!, $productOrderLines: [ProductOrderLineInputDTO!]!) {\n  placeOrder(productOrderInputDTO: {comment: $comment, customer: $customer, productOrderLines: $productOrderLines, deliveryTime: $deliveryTime}) {\n    id\n  }\n}\n    `;\nexport type PlaceOrderMutationFn = Apollo.MutationFunction<PlaceOrderMutation, PlaceOrderMutationVariables>;\n\n/**\n * __usePlaceOrderMutation__\n *\n * To run a mutation, you first call `usePlaceOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePlaceOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [placeOrderMutation, { data, loading, error }] = usePlaceOrderMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      deliveryTime: // value for 'deliveryTime'\n *      customer: // value for 'customer'\n *      productOrderLines: // value for 'productOrderLines'\n *   },\n * });\n */\nexport function usePlaceOrderMutation(baseOptions?: Apollo.MutationHookOptions<PlaceOrderMutation, PlaceOrderMutationVariables>) {\n        return Apollo.useMutation<PlaceOrderMutation, PlaceOrderMutationVariables>(PlaceOrderDocument, baseOptions);\n      }\nexport type PlaceOrderMutationHookResult = ReturnType<typeof usePlaceOrderMutation>;\nexport type PlaceOrderMutationResult = Apollo.MutationResult<PlaceOrderMutation>;\nexport type PlaceOrderMutationOptions = Apollo.BaseMutationOptions<PlaceOrderMutation, PlaceOrderMutationVariables>;\nexport const FindAllOrdersDocument = gql`\n    query FindAllOrders($page: String, $size: String, $sort: String) {\n  findAllOrders(page: $page, size: $size, sort: $sort) {\n    content {\n      ...OrderContentItem\n    }\n    last\n    first\n    number\n    totalPages\n    totalElements\n  }\n}\n    ${OrderContentItemFragmentDoc}`;\n\n/**\n * __useFindAllOrdersQuery__\n *\n * To run a query within a React component, call `useFindAllOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllOrdersQuery({\n *   variables: {\n *      page: // value for 'page'\n *      size: // value for 'size'\n *      sort: // value for 'sort'\n *   },\n * });\n */\nexport function useFindAllOrdersQuery(baseOptions?: Apollo.QueryHookOptions<FindAllOrdersQuery, FindAllOrdersQueryVariables>) {\n        return Apollo.useQuery<FindAllOrdersQuery, FindAllOrdersQueryVariables>(FindAllOrdersDocument, baseOptions);\n      }\nexport function useFindAllOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllOrdersQuery, FindAllOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<FindAllOrdersQuery, FindAllOrdersQueryVariables>(FindAllOrdersDocument, baseOptions);\n        }\nexport type FindAllOrdersQueryHookResult = ReturnType<typeof useFindAllOrdersQuery>;\nexport type FindAllOrdersLazyQueryHookResult = ReturnType<typeof useFindAllOrdersLazyQuery>;\nexport type FindAllOrdersQueryResult = Apollo.QueryResult<FindAllOrdersQuery, FindAllOrdersQueryVariables>;\nexport const AddNewProductDocument = gql`\n    mutation AddNewProduct($name: String!, $position: Int!, $stock: Boolean!, $costPer: String!, $price: BigDecimal!, $categoryId: String!, $description: String!) {\n  saveNewProduct(productInputDTO: {name: $name, price: $price, stock: $stock, costPer: $costPer, position: $position, categoryId: $categoryId, description: $description}) {\n    id\n  }\n}\n    `;\nexport type AddNewProductMutationFn = Apollo.MutationFunction<AddNewProductMutation, AddNewProductMutationVariables>;\n\n/**\n * __useAddNewProductMutation__\n *\n * To run a mutation, you first call `useAddNewProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNewProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNewProductMutation, { data, loading, error }] = useAddNewProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      position: // value for 'position'\n *      stock: // value for 'stock'\n *      costPer: // value for 'costPer'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useAddNewProductMutation(baseOptions?: Apollo.MutationHookOptions<AddNewProductMutation, AddNewProductMutationVariables>) {\n        return Apollo.useMutation<AddNewProductMutation, AddNewProductMutationVariables>(AddNewProductDocument, baseOptions);\n      }\nexport type AddNewProductMutationHookResult = ReturnType<typeof useAddNewProductMutation>;\nexport type AddNewProductMutationResult = Apollo.MutationResult<AddNewProductMutation>;\nexport type AddNewProductMutationOptions = Apollo.BaseMutationOptions<AddNewProductMutation, AddNewProductMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($id: String!, $name: String!, $position: Int!, $stock: Boolean!, $costPer: String!, $price: BigDecimal!, $categoryId: String!, $description: String!) {\n  updateProduct(productId: $id, productInputDTO: {name: $name, stock: $stock, price: $price, costPer: $costPer, position: $position, categoryId: $categoryId, description: $description}) {\n    id\n  }\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      position: // value for 'position'\n *      stock: // value for 'stock'\n *      costPer: // value for 'costPer'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\nexport const AddNewImagesDocument = gql`\n    mutation AddNewImages($images: [Upload!]!, $productId: String!) {\n  addNewImages(images: $images, productId: $productId) {\n    id\n    images {\n      id\n    }\n  }\n}\n    `;\nexport type AddNewImagesMutationFn = Apollo.MutationFunction<AddNewImagesMutation, AddNewImagesMutationVariables>;\n\n/**\n * __useAddNewImagesMutation__\n *\n * To run a mutation, you first call `useAddNewImagesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNewImagesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNewImagesMutation, { data, loading, error }] = useAddNewImagesMutation({\n *   variables: {\n *      images: // value for 'images'\n *      productId: // value for 'productId'\n *   },\n * });\n */\nexport function useAddNewImagesMutation(baseOptions?: Apollo.MutationHookOptions<AddNewImagesMutation, AddNewImagesMutationVariables>) {\n        return Apollo.useMutation<AddNewImagesMutation, AddNewImagesMutationVariables>(AddNewImagesDocument, baseOptions);\n      }\nexport type AddNewImagesMutationHookResult = ReturnType<typeof useAddNewImagesMutation>;\nexport type AddNewImagesMutationResult = Apollo.MutationResult<AddNewImagesMutation>;\nexport type AddNewImagesMutationOptions = Apollo.BaseMutationOptions<AddNewImagesMutation, AddNewImagesMutationVariables>;\nexport const ProductDocument = gql`\n    query Product($id: String!) {\n  productById(productId: $id) {\n    ...ProductItem\n  }\n}\n    ${ProductItemFragmentDoc}`;\n\n/**\n * __useProductQuery__\n *\n * To run a query within a React component, call `useProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProductQuery(baseOptions?: Apollo.QueryHookOptions<ProductQuery, ProductQueryVariables>) {\n        return Apollo.useQuery<ProductQuery, ProductQueryVariables>(ProductDocument, baseOptions);\n      }\nexport function useProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductQuery, ProductQueryVariables>) {\n          return Apollo.useLazyQuery<ProductQuery, ProductQueryVariables>(ProductDocument, baseOptions);\n        }\nexport type ProductQueryHookResult = ReturnType<typeof useProductQuery>;\nexport type ProductLazyQueryHookResult = ReturnType<typeof useProductLazyQuery>;\nexport type ProductQueryResult = Apollo.QueryResult<ProductQuery, ProductQueryVariables>;\nexport const DeleteProductDocument = gql`\n    mutation DeleteProduct($id: String!) {\n  deleteProduct(productId: $id) {\n    status\n  }\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;","import React, { Component, ErrorInfo, ReactNode } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\ntype Props = {\n  children: ReactNode;\n};\n\ntype State = {\n  hasError: boolean;\n};\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <Container>\n          <Row>\n            <Col>Sorry.. there was an error</Col>\n          </Row>\n        </Container>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import {\n  ApolloClient,\n  ApolloProvider,\n  from,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport React, { ReactNode, useContext } from \"react\";\n\nimport { AuthContext } from \"./AuthProvider\";\n\ntype Props = {\n  children: ReactNode;\n};\nconst { hostname } = window.location;\n\nconst uploadLink = createUploadLink({\n  uri: `https://${hostname}:5003/graphql/`,\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nexport const useAppApolloClient = () => {\n  const { authData } = useContext(AuthContext);\n  const authLink = setContext((_, { headers }) => {\n    const token = authData?.accessToken;\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  });\n  return new ApolloClient({\n    link: from([errorLink, authLink, uploadLink]),\n    cache: new InMemoryCache(),\n  });\n};\n\nconst Apollo = ({ children }: Props) => {\n  const client = useAppApolloClient();\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default Apollo;\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\n\ntype Props = {\n  isAuth: boolean;\n  path: string;\n  children: JSX.Element;\n};\n\nconst PrivateRoute = ({ isAuth, children, ...rest }: Props) => {\n  return (\n    <Route {...rest} render={() => (isAuth ? children : <Redirect to=\"/\" />)} />\n  );\n};\nexport default PrivateRoute;\n","import React, { Suspense, useContext } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport { AuthContext } from \"providers/AuthProvider\";\n\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst HomePageLazy = React.lazy(() => import(\"../pages/HomePage\"));\nconst LoginPageLazy = React.lazy(() => import(\"../pages/LoginPage\"));\nconst AdminPageLazy = React.lazy(() => import(\"../pages/AdminPage\"));\nconst ModalRouterLazy = React.lazy(() => import(\"../modals/ModalRouter\"));\n\nconst FallbackWrapper = styled.div`\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst fallback = (\n  <FallbackWrapper>\n    <Spinner animation=\"grow\" variant=\"primary\" />\n  </FallbackWrapper>\n);\n\nconst AllRoutes = () => {\n  const { authData } = useContext(AuthContext);\n  const location = useLocation<{ modal?: boolean }>();\n  const isModal = location.state?.modal;\n  const isAuth = !!authData;\n  return (\n    <Suspense fallback={fallback}>\n      <Switch>\n        <Route component={HomePageLazy} exact path=\"/\" />\n        <Route path=\"/login\" exact component={LoginPageLazy} />\n        <PrivateRoute path=\"/admin\" isAuth={isAuth}>\n          <AdminPageLazy />\n        </PrivateRoute>\n        <Route render={() => <Redirect to=\"/\" />} />\n      </Switch>\n      {isModal ? <Route path=\"/\" component={ModalRouterLazy} /> : null}\n    </Suspense>\n  );\n};\n\nexport default AllRoutes;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { ToastProvider } from \"react-toast-notifications\";\n\nimport ErrorBoundary from \"pages/ErrorBoundary\";\nimport Apollo from \"providers/Apollo\";\nimport AuthContext from \"providers/AuthProvider\";\nimport BasketProvider from \"providers/BasketProvider\";\n\nimport DataProvider from \"./providers/DataProvider\";\nimport Routes from \"./routes\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"slick-carousel/slick/slick.css\";\n\nexport const LOCATION_PROTOKOL = `https://`;\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <ToastProvider>\n        <AuthContext>\n          <Apollo>\n            <DataProvider>\n              <BasketProvider>\n                <Router>\n                  <Routes />\n                </Router>\n              </BasketProvider>\n            </DataProvider>\n          </Apollo>\n        </AuthContext>\n      </ToastProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}