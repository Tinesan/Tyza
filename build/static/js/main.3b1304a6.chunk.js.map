{"version":3,"sources":["pages/ErrorBoundary/ErrorBoundary.tsx","providers/Apollo.tsx","components/Basket/BasketItem.tsx","components/Basket/BasketList.tsx","components/Basket/BasketResult/BasketResult.tsx","hooks/useBasketProduct.tsx","modals/BasketModal.tsx","components/Form/Textarea.tsx","components/Form/TimeRadio.tsx","components/Form/OrderForm.tsx","components/Form/Input.tsx","modals/CallModal.tsx","modals/OrderModal.tsx","modals/OrderResult.tsx","modals/ModalRouter.tsx","routes/PrivateRoute.tsx","routes/AllRoutes.tsx","App.tsx","images/icons/basketIcon.svg","components/Counter/Counter.tsx","images/icons/closeIcon.svg","images/icons/deleteIcon.svg","images/sadCat.png","serviceWorker.ts","index.tsx","components/Button/Button.styled.tsx","components/Button/Button.tsx","components/Button/BasketIcon.tsx","ui/media.ts","providers/BasketProvider.tsx","modals/hooks.ts","ui/Title.tsx","ui/colors.tsx","providers/AuthProvider.tsx","generated/graphql.tsx","providers/DataProvider.tsx","images/icons/logo.svg","images/icons/success.svg"],"names":["ErrorBoundary","state","hasError","error","errorInfo","console","this","Container","Row","Col","props","children","_","Component","hostname","window","location","uploadLink","createUploadLink","uri","errorLink","onError","graphQLErrors","networkError","map","message","locations","path","log","Apollo","client","authData","useContext","AuthContext","authLink","setContext","headers","token","accessToken","authorization","ApolloClient","link","from","cache","InMemoryCache","connectToDevTools","process","useAppApolloClient","ImageWrapper","styled","div","TableData","td","width","device","mobile","DeleteIconWrapper","BasketItem","data","onDelete","onChange","id","images","price","orderQuantity","name","image","length","imageUrl","LOCATION_PROTOKOL","TestImage","totalPrice","toFixed","src","alt","Counter","value","onClick","DeleteIcon","Table","table","tablet","colors","ebb","BasketList","BasketContext","deleteBasketValue","addBasketValue","baketItem","key","className","colSpan","BasketResultWrapper","DeliveryWrapper","TotalPriceWrapper","coffee","BasketResult","deliveryPrice","useBasketProduct","basketValues","products","DataContext","basketProducts","useMemo","basketValuesKeys","Object","keys","basketListData","forEach","product","find","basketItem","push","BasketModalWrapper","BasketListWrapper","ButtonWrapper","ModalFooter","ResultWrapper","BasketModal","onClose","openModal","useModal","isBasketEmpty","isPriceMoreMinimum","canCreateOrder","SadCat","Button","size","ButtonSize","LARGE","color","ButtonColor","COFFEE_GRADIENT","text","TextareaWrapper","silk","Textarea","register","textAreaProps","ref","RadioWrapper","RadioItemLabel","label","white","RADIO_VALUES","TimeRadio","firstValue","secondValue","type","InputKeys","deliveryTime","TextBold","p","Text","phone","street","house","building","flat","floor","frontDoor","comment","getProductOrderLines","description","costPer","productId","OrderForm","useState","loading","setLoading","usePlaceOrderMutation","placeOrder","placeOrderLoading","clearBasket","useForm","defaultValues","handleSubmit","control","errors","onSubmit","a","customer","productOrderLines","variables","failed","e","preventDefault","required","sm","rows","style","resize","xs","lg","WHITE_WITH_BORDER","disabled","InputWrapper","vividTangerine","getCyrillicLabel","isPhoneValid","indexOf","undefined","InputPhone","as","InputMask","alwaysShowMask","mask","rules","validate","Input","CallModalWrapper","CallModalText","CallModal","idLoading","setIsLoading","callRequest","useCallRequestQuery","skip","refetch","showResult","resultError","setResultModal","Success","OrderModalWrapper","OrderModal","OrderResultWrapper","OrderResult","modalQueryParams","isOrderFailed","ModalWrapper","roseWhite","MODALS","MODAL_NAMES","basketModal","orderModal","orderResult","callModal","CloseButton","ModalRouter","closeModal","showModal","setShowModal","ModalWindow","modal","dialogClassName","Modal","show","centered","onHide","CloseIcon","PrivateRoute","isAuth","rest","render","to","HomePageLazy","React","lazy","LoginPageLazy","AdminPageLazy","fallback","Logo","AllRoutes","isModal","useLocation","component","exact","ModalPage","App","DataProvider","BasketProvider","module","exports","CounterWrapper","CountButton","button","CounterValue","increment","useCallback","decrement","onInputChange","target","Math","abs","Boolean","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","StyledButton","TRANSPARENT","css","WHITE","SMALL","LIGHT","BasketIndicator","BasketIconWrapper","whiteIndicator","BasketIcon","indicator","useRef","basketValuesLength","useEffect","current","classList","add","setTimeout","remove","BIcon","createContext","setBasketValues","basketProductsIds","hasBasketItems","Provider","basketValue","pV","copyBasketValues","getUrlParams","searchParams","URLSearchParams","toString","history","useHistory","pathname","search","modalName","parsedSearchParams","correactedSearch","substring","JSON","parse","decodeURI","replace","H2","h2","H3","h3","H5","h5","seashellPeach","wafer","thatch","dawnPink","black","gray","mercury","isAdmin","setAuthData","AuthProvider","authSessionLogin","sessionStorage","getItem","authDataSession","authorities","includes","AuthenticateDataFragmentDoc","gql","CategoryItemFragmentDoc","OrderContentItemFragmentDoc","ProductItemFragmentDoc","AuthenticateDocument","useAuthenticateQuery","baseOptions","CallRequestDocument","CategoryDocument","useCategoryQuery","UpdateCategoryDocument","useUpdateCategoryMutation","AddNewCategoryDocument","useAddNewCategoryMutation","DeleteCategoryDocument","useDeleteCategoryMutation","CategoriesAndProductsDocument","useCategoriesAndProductsQuery","PlaceOrderDocument","FindAllOrdersDocument","useFindAllOrdersQuery","AddNewProductDocument","useAddNewProductMutation","UpdateProductDocument","useUpdateProductMutation","AddNewImagesDocument","useAddNewImagesMutation","ProductDocument","useProductQuery","DeleteProductDocument","useDeleteProductMutation","categories","dataProviderLoading","refetchCategoriesAndProducts","sorterFunction","b","listCategory","listProduct"],"mappings":"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","file":"static/js/main.3b1304a6.chunk.js","sourcesContent":["import React, { Component, ErrorInfo, ReactNode } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\ntype Props = {\n  children: ReactNode;\n};\n\ntype State = {\n  hasError: boolean;\n};\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <Container>\n          <Row>\n            <Col>Sorry.. there was an error</Col>\n          </Row>\n        </Container>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import {\n  ApolloClient,\n  ApolloProvider,\n  from,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport React, { ReactNode, useContext } from \"react\";\n\nimport { AuthContext } from \"./AuthProvider\";\n\ntype Props = {\n  children: ReactNode;\n};\nconst { hostname } = window.location;\n\nconst uploadLink = createUploadLink({\n  uri: `https://${hostname}:5003/graphql/`,\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nexport const useAppApolloClient = () => {\n  const { authData } = useContext(AuthContext);\n  const authLink = setContext((_, { headers }) => {\n    const token = authData?.accessToken;\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  });\n  return new ApolloClient({\n    link: from([errorLink, authLink, uploadLink]),\n    cache: new InMemoryCache(),\n    connectToDevTools: process.env.NODE_ENV === \"development\",\n  });\n};\n\nconst Apollo = ({ children }: Props) => {\n  const client = useAppApolloClient();\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default Apollo;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { LOCATION_PROTOKOL } from \"App\";\nimport Counter from \"components/Counter\";\nimport { BasketProduct } from \"hooks/useBasketProduct\";\nimport DeleteIcon from \"images/icons/deleteIcon.svg\";\nimport TestImage from \"images/icons/logo.svg\";\nimport { BasketValue } from \"providers/BasketProvider\";\nimport { device } from \"ui/media\";\n\ntype Props = {\n  data: BasketProduct;\n  onDelete: (id: ID) => void;\n  onChange: (basketValue: BasketValue) => void;\n};\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  max-height: 40px;\n  max-width: 70px;\n\n  img {\n    max-height: 40px;\n    max-width: 70px;\n    object-fit: contain;\n  }\n`;\n\nconst TableData = styled.td<{ width: number }>`\n  width: ${({ width }) => `${width}px`};\n\n  @media ${device.mobile} {\n    width: auto;\n  }\n`;\n\nconst DeleteIconWrapper = styled.div`\n  display: flex;\n  margin-left: auto;\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  img {\n    max-width: 100%;\n    object-fit: contain;\n  }\n`;\n\nconst BasketItem = ({ data, onDelete, onChange }: Props) => {\n  const { id, images, price, orderQuantity, name } = data;\n  const image = images[images.length - 1]?.uri;\n  const imageUrl = image ? `${LOCATION_PROTOKOL}${image}` : TestImage;\n  const totalPrice = +(price * orderQuantity).toFixed(2);\n\n  return (\n    <tr>\n      <TableData width={70}>\n        <ImageWrapper>\n          <img src={imageUrl} alt={name} />\n        </ImageWrapper>\n      </TableData>\n      <TableData width={200}>{name}</TableData>\n      <TableData width={100}>\n        <Counter\n          value={orderQuantity}\n          onChange={(value) => onChange({ [id]: value })}\n        />\n      </TableData>\n      <TableData width={90}>{totalPrice} руб.</TableData>\n      <TableData width={50}>\n        <DeleteIconWrapper onClick={() => onDelete(id)}>\n          <img src={DeleteIcon} alt=\"удалить\" />\n        </DeleteIconWrapper>\n      </TableData>\n    </tr>\n  );\n};\n\nexport default BasketItem;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport { BasketProduct } from \"hooks/useBasketProduct\";\nimport { BasketContext } from \"providers/BasketProvider\";\nimport { colors } from \"ui/colors\";\nimport { device } from \"ui/media\";\n\nimport BasketItemC from \"./BasketItem\";\n\ntype Props = {\n  data: BasketProduct[];\n};\n\nconst Table = styled.table`\n  table-layout: fixed;\n  width: 100%;\n  color: rgba(0, 0, 0, 0.5);\n  td:not(:first-child) {\n    padding-left: 15px;\n  }\n\n  tr:not(:last-child) {\n    td {\n      padding-bottom: 10px;\n    }\n  }\n\n  @media ${device.tablet} {\n    table-layout: auto;\n  }\n  @media ${device.mobile} {\n    tbody {\n      tr {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 10px 0;\n\n        :not(:last-child) {\n          border-bottom: 1px solid ${colors.ebb};\n        }\n\n        td {\n          :nth-child(1) {\n            flex-basis: 30%;\n            padding-bottom: 8px;\n          }\n          :nth-child(2) {\n            flex-basis: 70%;\n            padding-bottom: 8px;\n          }\n          :nth-child(3) {\n            padding-left: 0;\n            flex-basis: 30%;\n          }\n          :nth-child(4) {\n            flex-basis: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BasketList = ({ data }: Props) => {\n  const { deleteBasketValue, addBasketValue, totalPrice } = useContext(\n    BasketContext\n  );\n  if (!data.length) return null;\n  return (\n    <Table>\n      <tbody>\n        {data.map((baketItem) => (\n          <BasketItemC\n            key={baketItem.id}\n            data={baketItem}\n            onChange={addBasketValue}\n            onDelete={deleteBasketValue}\n          />\n        ))}\n        <tr>\n          <td className=\"p-0\"></td>\n          <td className=\"p-0\"></td>\n          <td>\n            <span className=\"font-weight-bold\">Всего</span>\n          </td>\n          <td colSpan={2}>\n            <span className=\"font-weight-bold\">{totalPrice} руб</span>\n          </td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n};\n\nexport default BasketList;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport { BasketContext } from \"providers/BasketProvider\";\nimport { colors } from \"ui/colors\";\n\nconst BasketResultWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst DeliveryWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  opacity: 0.5;\n  font-size: 18px;\n`;\n\nconst TotalPriceWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n  font-weight: 700;\n  color: ${colors.coffee};\n`;\n\nconst BasketResult = () => {\n  const { totalPrice, deliveryPrice } = useContext(BasketContext);\n\n  return (\n    <BasketResultWrapper>\n      <DeliveryWrapper>\n        <span>Доставка</span>\n        <span>{deliveryPrice} руб.</span>\n      </DeliveryWrapper>\n      <TotalPriceWrapper>\n        <span>К оплате</span>\n        <span>{totalPrice + deliveryPrice}</span>\n      </TotalPriceWrapper>\n    </BasketResultWrapper>\n  );\n};\n\nexport default BasketResult;\n","import { ProductItemFragment } from \"generated/graphql\";\nimport { BasketContext } from \"providers/BasketProvider\";\nimport { DataContext } from \"providers/DataProvider\";\nimport { useContext, useMemo } from \"react\";\n\nexport type BasketProduct = ProductItemFragment & { orderQuantity: number };\n\nconst useBasketProduct = () => {\n  const { basketValues } = useContext(BasketContext);\n  const { products } = useContext(DataContext);\n\n  const basketProducts: BasketProduct[] = useMemo(() => {\n    const basketValuesKeys = Object.keys(basketValues);\n    if (!basketValuesKeys.length) return [];\n    const basketListData: BasketProduct[] = [];\n    basketValuesKeys.forEach((key) => {\n      const product = products.find(({ id }) => id === key);\n      if (product) {\n        const basketItem: BasketProduct = {\n          ...product,\n          orderQuantity: basketValues[key],\n        };\n        basketListData.push(basketItem);\n      }\n    });\n    return basketListData;\n  }, [basketValues, products]);\n\n  return { basketProducts };\n};\n\nexport default useBasketProduct;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport { BasketList } from \"components/Basket\";\nimport BasketResult from \"components/Basket/BasketResult\";\nimport Button, { ButtonColor, ButtonSize } from \"components/Button\";\nimport useBasketProduct from \"hooks/useBasketProduct\";\nimport SadCat from \"images/sadCat.png\";\nimport { BasketContext } from \"providers/BasketProvider\";\nimport { colors } from \"ui/colors\";\nimport { device } from \"ui/media\";\nimport { H3 } from \"ui/Title\";\n\nimport useModal from \"./hooks\";\n\ntype Props = {\n  onClose: () => void;\n};\n\nconst BasketModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst BasketListWrapper = styled.div`\n  display: flex;\n  padding-bottom: 30px;\n  border-bottom: 2px solid ${colors.ebb};\n  @media ${device.mobile} {\n    padding-bottom: 0px;\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst ModalFooter = styled.div`\n  margin-top: 40px;\n  display: flex;\n  justify-content: space-between;\n  > div {\n    width: calc(50% - 15px);\n    flex-shrink: 0;\n\n    @media ${device.tablet} {\n      width: auto;\n    }\n  }\n\n  @media ${device.tablet} {\n    flex-direction: column;\n    margin-top: 20px;\n    ${ButtonWrapper} {\n      margin-top: 20px;\n      justify-content: center;\n    }\n  }\n`;\n\nconst ResultWrapper = styled.div``;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  img {\n    max-width: 150px;\n    max-height: 150px;\n  }\n`;\n\nconst BasketModal = ({ onClose }: Props) => {\n  const { openModal } = useModal();\n  const { totalPrice } = useContext(BasketContext);\n  const { basketProducts } = useBasketProduct();\n  const isBasketEmpty = !basketProducts.length;\n  const isPriceMoreMinimum = totalPrice >= 25;\n  const canCreateOrder = !isBasketEmpty && isPriceMoreMinimum;\n  return (\n    <BasketModalWrapper>\n      <H3\n        className={`coffee-color mb-4 ${isBasketEmpty ? \" text-center\" : \"\"}`}\n      >\n        Ваша корзина {isBasketEmpty && \"пока пуста\"}\n      </H3>\n      {isBasketEmpty && (\n        <ImageWrapper>\n          <img src={SadCat} alt=\"sad-cat\" />\n        </ImageWrapper>\n      )}\n      <BasketListWrapper>\n        <BasketList data={basketProducts} />\n      </BasketListWrapper>\n      <ModalFooter>\n        {!isBasketEmpty && (\n          <ResultWrapper>\n            {isPriceMoreMinimum ? (\n              <BasketResult />\n            ) : (\n              <span className=\"coffee-color\">\n                Минимальная сумма заказа - 25 рублей\n              </span>\n            )}\n          </ResultWrapper>\n        )}\n        <ButtonWrapper\n          className={isBasketEmpty ? \"d-flex w-100 justify-content-center\" : \"\"}\n        >\n          <Button\n            size={ButtonSize.LARGE}\n            color={ButtonColor.COFFEE_GRADIENT}\n            text={canCreateOrder ? \"ОФОРМИТЬ ЗАКАЗ\" : \"Вернуться к заказу\"}\n            onClick={() =>\n              canCreateOrder ? openModal(\"orderModal\") : onClose()\n            }\n          />\n        </ButtonWrapper>\n      </ModalFooter>\n    </BasketModalWrapper>\n  );\n};\n\nexport default BasketModal;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { colors } from \"ui/colors\";\nimport { RefReturn } from \"./OrderForm\";\n\ntype Props = React.DetailedHTMLProps<\n  React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n  HTMLTextAreaElement\n> & {\n  register: () => RefReturn;\n};\n\nconst TextareaWrapper = styled.div`\n  display: flex;\n\n  textarea {\n    width: 100%;\n    border: 1px solid;\n    border-color: ${colors.silk};\n    transition-duration: 0.3s;\n    border-radius: 15px;\n    background-color: transparent;\n    outline: none;\n    padding: 3px 15px;\n    transition-duration: 0.3s;\n    color: ${colors.coffee};\n\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 5px ${colors.silk};\n    }\n  }\n`;\n\nconst Textarea = ({ register, ...textAreaProps }: Props) => {\n  return (\n    <TextareaWrapper>\n      <textarea {...textAreaProps} ref={register} />\n    </TextareaWrapper>\n  );\n};\n\nexport default Textarea;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { colors } from \"ui/colors\";\n\nimport { InputKeys, RefReturn } from \"./OrderForm\";\n\ntype Props = {\n  register: () => RefReturn;\n};\n\nconst RadioWrapper = styled.div`\n  display: flex;\n`;\n\nconst RadioItemLabel = styled.label`\n  display: block;\n  position: relative;\n  padding-left: 25px;\n  cursor: pointer;\n  font-size: 14px;\n  user-select: none;\n  color: ${colors.coffee};\n\n  input {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n  }\n\n  .checkmark {\n    position: absolute;\n    top: 2px;\n    left: 0;\n    height: 16px;\n    width: 16px;\n    box-sizing: border-box;\n    border: 2px solid ${colors.coffee};\n    background-color: ${colors.white};\n    border-radius: 50%;\n\n    &::after {\n      content: \"\";\n      top: 1px;\n      left: 1px;\n      width: 10px;\n      height: 10px;\n      border-radius: 50%;\n\n      background: ${colors.coffee};\n      position: absolute;\n      display: none;\n    }\n  }\n\n  &:hover {\n    input ~ .checkmark {\n      background-color: ${colors.ebb};\n    }\n  }\n\n  input:checked ~ .checkmark {\n    background-color: ${colors.white};\n\n    &:after {\n      display: block;\n    }\n  }\n`;\n\nexport const RADIO_VALUES = {\n  firstValue: \"12.00-18.00\",\n  secondValue: \"18.00-22.00\",\n};\n\nconst TimeRadio = ({ register }: Props) => {\n  const { firstValue, secondValue } = RADIO_VALUES;\n\n  return (\n    <RadioWrapper>\n      <RadioItemLabel className={`mr-4 }`}>\n        {firstValue}\n        <input\n          type=\"radio\"\n          ref={register}\n          value={firstValue}\n          name={InputKeys.deliveryTime}\n        />\n        <span className=\"checkmark\"></span>\n      </RadioItemLabel>\n      <RadioItemLabel>\n        {secondValue}\n        <input\n          type=\"radio\"\n          ref={register}\n          value={secondValue}\n          name={InputKeys.deliveryTime}\n        />\n        <span className=\"checkmark\"></span>\n      </RadioItemLabel>\n    </RadioWrapper>\n  );\n};\n\nexport default TimeRadio;\n","import React, { useContext, useState } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\n\nimport Button, { ButtonColor, ButtonSize } from \"components/Button\";\nimport {\n  ProductOrderLineInputDto,\n  usePlaceOrderMutation,\n} from \"generated/graphql\";\nimport useBasketProduct, { BasketProduct } from \"hooks/useBasketProduct\";\nimport useModal from \"modals/hooks\";\nimport { BasketContext } from \"providers/BasketProvider\";\nimport { colors } from \"ui/colors\";\n\nimport Input, { InputPhone } from \"./Input\";\nimport Textarea from \"./Textarea\";\nimport TimeRadio, { RADIO_VALUES } from \"./TimeRadio\";\n\nconst TextBold = styled.p`\n  margin: 0;\n  font-weight: 600;\n  font-size: 18px;\n  color: ${colors.coffee};\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  color: ${colors.coffee};\n`;\n\nconst TotalPriceWrapper = styled.div`\n  display: flex;\n  font-size: 24px;\n  font-weight: 700;\n  color: rgba(0, 0, 0, 0.5);\n`;\n\nexport type RefReturn =\n  | string\n  | ((instance: HTMLInputElement | null) => void)\n  | React.RefObject<HTMLInputElement>\n  | null\n  | undefined;\n\ntype Inputs = {\n  name: string;\n  phone: string;\n  street: string;\n  house: string;\n  building: string;\n  flat: string;\n  floor: string;\n  frontDoor: string;\n  deliveryTime: string;\n  comment: string;\n};\n\nexport const InputKeys = {\n  name: \"name\",\n  phone: \"phone\",\n  street: \"street\",\n  house: \"house\",\n  building: \"building\",\n  flat: \"flat\",\n  floor: \"floor\",\n  frontDoor: \"frontDoor\",\n  deliveryTime: \"deliveryTime\",\n  comment: \"comment\",\n} as const;\n\nconst getProductOrderLines = (\n  basketProducts: BasketProduct[]\n): ProductOrderLineInputDto[] => {\n  return basketProducts.map((product) => {\n    const { id, name, price, description, costPer, orderQuantity } = product;\n    const ProductOrderLine: ProductOrderLineInputDto = {\n      name,\n      price,\n      costPer,\n      productId: id,\n      orderQuantity,\n      description: description || \"\",\n    };\n    return ProductOrderLine;\n  });\n};\n\nconst OrderForm = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [placeOrder, { loading: placeOrderLoading }] = usePlaceOrderMutation();\n  const { openModal } = useModal();\n  const { basketProducts } = useBasketProduct();\n  const { totalPrice, deliveryPrice, clearBasket } = useContext(BasketContext);\n  const { register, handleSubmit, control, errors } = useForm<Inputs>({\n    defaultValues: {\n      deliveryTime: RADIO_VALUES.firstValue,\n    },\n  });\n  const onSubmit = async (data: Inputs) => {\n    setLoading(true);\n    const { deliveryTime, comment, ...customer } = data;\n    const productOrderLines = getProductOrderLines(basketProducts);\n    try {\n      await placeOrder({\n        variables: {\n          comment,\n          customer,\n          deliveryTime,\n          productOrderLines,\n        },\n      });\n      clearBasket();\n      openModal(\"orderResult\");\n    } catch (error) {\n      openModal(\"orderResult\", { failed: 1 });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={(e) => e.preventDefault()}>\n      <Row className=\"mb-4\">\n        <Col>\n          <Input\n            required\n            label={InputKeys.name}\n            register={register}\n            hasError={!!errors[InputKeys.name]}\n          />\n        </Col>\n        <Col>\n          <InputPhone\n            required\n            control={control}\n            label={InputKeys.phone}\n            hasError={!!errors[InputKeys.phone]}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-3\">\n        <Col>\n          <TextBold>Адрес доставки по Минску</TextBold>\n          <Text>\n            (Доставка за пределы МКАД возможна после согласования с менеджером)\n          </Text>\n        </Col>\n      </Row>\n      <Row className=\"mb-2\">\n        <Col sm=\"6\">\n          <Input\n            required\n            label={InputKeys.street}\n            register={register}\n            hasError={!!errors[InputKeys.street]}\n          />\n        </Col>\n        <Col sm=\"3\">\n          <Input\n            required\n            label={InputKeys.house}\n            register={register}\n            hasError={!!errors[InputKeys.house]}\n          />\n        </Col>\n        <Col sm=\"3\">\n          <Input\n            label={InputKeys.building}\n            register={register}\n            hasError={!!errors[InputKeys.building]}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col sm=\"3\">\n          <Input\n            label={InputKeys.flat}\n            register={register}\n            hasError={!!errors[InputKeys.flat]}\n          />\n        </Col>\n        <Col sm=\"3\">\n          <Input\n            label={InputKeys.frontDoor}\n            register={register}\n            hasError={!!errors[InputKeys.frontDoor]}\n          />\n        </Col>\n        <Col sm=\"3\">\n          <Input\n            label={InputKeys.floor}\n            register={register}\n            hasError={!!errors[InputKeys.floor]}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <TextBold className=\"mb-2\">Время доставки*</TextBold>\n          <TimeRadio register={register} />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col>\n          <TextBold className=\"mb-2\">Добавьте комментарий к заказу</TextBold>\n          <Textarea\n            rows={2}\n            style={{ resize: \"none\" }}\n            name={InputKeys.comment}\n            register={register}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mb-4\">\n        <Col className=\"d-flex justify-content-end\">\n          <TotalPriceWrapper>\n            <span className=\"mr-5 font-weight-normal\">К оплате</span>\n            <span className=\"coffee-color bold\">\n              {totalPrice + deliveryPrice}\n            </span>\n          </TotalPriceWrapper>\n        </Col>\n      </Row>\n      <Row className=\"mb-4 order-form-button-wrapper\">\n        <Col xs={12} lg={6}>\n          <Button\n            className=\"order-form-button\"\n            text=\"НАЗАД В КОРЗИНУ\"\n            size={ButtonSize.LARGE}\n            color={ButtonColor.WHITE_WITH_BORDER}\n            onClick={() => openModal(\"backetModal\")}\n          />\n        </Col>\n        <Col xs={12} lg={6}>\n          <div className=\"d-flex justify-content-end\">\n            <Button\n              className=\"order-form-button\"\n              text=\"ОФОРМИТЬ ЗАКАЗ\"\n              size={ButtonSize.LARGE}\n              onClick={handleSubmit(onSubmit)}\n              color={ButtonColor.COFFEE_GRADIENT}\n              disabled={placeOrderLoading || loading}\n            />\n          </div>\n        </Col>\n      </Row>\n    </form>\n  );\n};\n\nexport default OrderForm;\n","import React from \"react\";\nimport { Control, Controller } from \"react-hook-form\";\nimport InputMask from \"react-input-mask\";\nimport styled from \"styled-components\";\n\nimport { colors } from \"ui/colors\";\n\nimport { InputKeys, RefReturn } from \"./OrderForm\";\n\nconst InputWrapper = styled.div<{ hasError: boolean }>`\n  display: flex;\n  flex-direction: column;\n\n  label {\n    padding-left: 15px;\n    margin-bottom: 4px;\n    font-size: 14px;\n    transition-duration: 0.3s;\n    color: ${({ hasError }) =>\n      hasError ? colors.vividTangerine : `rgba(0, 0, 0, 0.5)`};\n  }\n\n  input {\n    border: 1px solid;\n    border-color: ${({ hasError }) =>\n      hasError ? colors.vividTangerine : colors.silk};\n    transition-duration: 0.3s;\n    border-radius: 30px;\n    background-color: transparent;\n    outline: none;\n    padding: 3px 15px;\n    transition-duration: 0.3s;\n    color: ${colors.coffee};\n\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 5px\n        ${({ hasError }) => (hasError ? colors.vividTangerine : colors.silk)};\n    }\n  }\n`;\n\ntype Props = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n> & {\n  hasError: boolean;\n  label: keyof typeof InputKeys;\n  register: ({\n    required,\n  }: {\n    required?: boolean;\n    pattern?: any;\n    validate?: any;\n  }) => RefReturn;\n};\n\nconst getCyrillicLabel = (label: keyof typeof InputKeys): string => {\n  switch (label) {\n    case InputKeys.name:\n      return \"Ваше имя\";\n    case InputKeys.phone:\n      return \"Ваш номер телефона\";\n    case InputKeys.street:\n      return \"Улица\";\n    case InputKeys.building:\n      return \"Корпус\";\n    case InputKeys.house:\n      return \"Дом\";\n    case InputKeys.flat:\n      return \"Квартира\";\n    case InputKeys.floor:\n      return \"Этаж\";\n    case InputKeys.frontDoor:\n      return \"Подъезд\";\n    default:\n      return \"\";\n  }\n};\n\nconst Input = ({ label, register, required, hasError }: Props) => {\n  return (\n    <InputWrapper hasError={hasError}>\n      <label>\n        {getCyrillicLabel(label)}\n        {required && \"*\"}\n      </label>\n      <input name={label} ref={register({ required })} />\n    </InputWrapper>\n  );\n};\n\nconst isPhoneValid = (value: string) => {\n  return value && value.indexOf(\"_\") === -1\n    ? undefined\n    : \"Phone number is required.\";\n};\n\ntype InputPhoneProps = Omit<Props, \"register\"> & { control: Control };\n\n// pattern: /^[+]?[0-9]{3}[-\\s.]?[(][0-9]{2}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{2}[-\\s.]?[0-9]{2}$/im,\n// +375447419152\nexport const InputPhone = ({\n  label,\n  control,\n  required,\n  hasError,\n}: InputPhoneProps) => {\n  return (\n    <InputWrapper hasError={hasError}>\n      <label>\n        {getCyrillicLabel(label)}\n        {required && \"*\"}\n      </label>\n      <Controller\n        as={InputMask}\n        name={label}\n        alwaysShowMask\n        mask=\"+375 (99) 999-99-99\"\n        rules={{\n          required,\n          validate: isPhoneValid,\n        }}\n        control={control}\n      />\n    </InputWrapper>\n  );\n};\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { Row } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\n\nimport Button, { ButtonColor, ButtonSize } from \"components/Button\";\nimport Input, { InputPhone } from \"components/Form/Input\";\nimport { useCallRequestQuery } from \"generated/graphql\";\nimport Success from \"images/icons/success.svg\";\n\ntype Props = {\n  onClose: () => void;\n};\n\nconst CallModalWrapper = styled.div``;\n\nconst CallModalText = styled.p`\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 60px;\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n  max-width: 200px;\n\n  img {\n    max-width: 100%;\n    max-height: 100%;\n    object-fit: contain;\n  }\n`;\n\ntype Inputs = {\n  name: string;\n  phone: string;\n};\n\nexport const InputKeys = {\n  name: \"name\",\n  phone: \"phone\",\n} as const;\n\ntype ResultValue = {\n  showResult: boolean;\n  resultError: boolean;\n};\n\nconst CallModal = ({ onClose }: Props) => {\n  const [idLoading, setIsLoading] = useState<boolean>(false);\n  const { refetch: callRequest } = useCallRequestQuery({ skip: true });\n  const { register, handleSubmit, errors, control } = useForm<Inputs>();\n  const [{ showResult, resultError }, setResultModal] = useState<ResultValue>({\n    showResult: false,\n    resultError: false,\n  });\n\n  const onSubmit = async ({ name, phone }: Inputs) => {\n    setIsLoading(true);\n    try {\n      await callRequest({ name, phone });\n      setResultModal({ showResult: true, resultError: false });\n    } catch (error) {\n      setResultModal({ showResult: true, resultError: true });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  if (showResult) {\n    return (\n      <CallModalWrapper>\n        {!resultError ? (\n          <>\n            <ImageWrapper>\n              <img src={Success} alt=\"order-result-logo\" />\n            </ImageWrapper>\n            <CallModalText className=\"coffee-color\">Спасибо!</CallModalText>\n            <CallModalText className=\"coffee-color\">\n              Мы скоро Вам перезвоним.\n            </CallModalText>{\" \"}\n          </>\n        ) : (\n          <CallModalText className=\"coffee-color\">\n            Извините, произошла ошибка\n          </CallModalText>\n        )}\n        <ButtonWrapper>\n          <Button\n            text=\"ok\"\n            size={ButtonSize.LARGE}\n            onClick={onClose}\n            color={ButtonColor.COFFEE_GRADIENT}\n          />\n        </ButtonWrapper>\n      </CallModalWrapper>\n    );\n  }\n  return (\n    <CallModalWrapper>\n      <CallModalText className=\"coffee-color mb-4\">\n        Оставьте пожалуйста номер телефона и мы скоро Вам перезвоним.\n      </CallModalText>\n      <form onSubmit={(e) => e.preventDefault()}>\n        <Row className=\"mb-4\">\n          <Col>\n            <Input\n              required\n              label={InputKeys.name}\n              register={register}\n              hasError={!!errors[InputKeys.name]}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <InputPhone\n              required\n              control={control}\n              label={InputKeys.phone}\n              hasError={!!errors[InputKeys.phone]}\n            />\n          </Col>\n        </Row>\n      </form>\n      <ButtonWrapper>\n        <Button\n          text=\"Жду звонка\"\n          disabled={idLoading}\n          size={ButtonSize.LARGE}\n          onClick={handleSubmit(onSubmit)}\n          color={ButtonColor.COFFEE_GRADIENT}\n        />\n      </ButtonWrapper>\n    </CallModalWrapper>\n  );\n};\n\nexport default CallModal;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { OrderForm } from \"components/Form\";\nimport { device } from \"ui/media\";\nimport { H3 } from \"ui/Title\";\n\ntype Props = {\n  onClose: () => void;\n};\n\nconst OrderModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .order-form-button-wrapper {\n    @media ${device.tablet} {\n      display: flex;\n      flex-direction: column-reverse;\n      margin-bottom: 0 !important;\n\n      .order-form-button {\n        width: 100%;\n        margin-bottom: 10px;\n      }\n    }\n  }\n`;\n\nconst OrderModal = ({ onClose }: Props) => {\n  return (\n    <OrderModalWrapper>\n      <H3 className=\"coffee-color mb-4\">Оформление заказа</H3>\n      <OrderForm />\n    </OrderModalWrapper>\n  );\n};\n\nexport default OrderModal;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Button, { ButtonColor, ButtonSize } from \"components/Button\";\nimport Success from \"images/icons/success.svg\";\nimport { H3 } from \"ui/Title\";\n\ntype Props = any & {\n  onClose: () => void;\n};\n\nconst OrderResultWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  padding: 50px 0 0;\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  max-width: 120px;\n  max-height: 120px;\n\n  img {\n    max-width: 100%;\n    max-height: 100%;\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  margin-top: 70px;\n`;\n\nconst OrderResult = ({ onClose, ...modalQueryParams }: Props) => {\n  const isOrderFailed = modalQueryParams?.failed;\n  return (\n    <OrderResultWrapper>\n      {isOrderFailed ? (\n        <>\n          <H3 className=\"coffee-color mb-0\">К сожалению, произошла ошибка</H3>\n          <H3 className=\"coffee-color mb-0\">Попробуйте снова</H3>\n        </>\n      ) : (\n        <>\n          <ImageWrapper>\n            <img src={Success} alt=\"order-result-logo\" />\n          </ImageWrapper>\n          <H3 className=\"coffee-color mb-0\">Спасибо за заказ!</H3>\n          <div className=\"pr-4 pl-4\">\n            <H3 className=\"coffee-color mb-0\">\n              Ожидайте, скоро наш менеджер свяжется с Вами.\n            </H3>\n          </div>\n        </>\n      )}\n      <ButtonWrapper>\n        <Button\n          size={ButtonSize.LARGE}\n          color={ButtonColor.COFFEE_GRADIENT}\n          text=\"OK\"\n          onClick={onClose}\n        />\n      </ButtonWrapper>\n    </OrderResultWrapper>\n  );\n};\n\nexport default OrderResult;\n","import React, { useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nimport CloseIcon from \"images/icons/closeIcon.svg\";\nimport { colors } from \"ui/colors\";\nimport { device } from \"ui/media\";\n\nimport BasketModal from \"./BasketModal\";\nimport CallModal from \"./CallModal\";\nimport useModal, { MODAL_NAMES, TModalName } from \"./hooks\";\nimport OrderModal from \"./OrderModal\";\nimport OrderResult from \"./OrderResult\";\n\nconst ModalWrapper = styled.div`\n  position: relative;\n  padding: 75px 100px;\n  background-color: ${colors.roseWhite};\n  border-radius: 10px;\n\n  @media ${device.mobile} {\n    padding: 30px;\n  }\n`;\n\nconst MODALS: {\n  [key in TModalName]: (\n    value: Required<{ onClose?: () => void; modalQueryParams?: any }>\n  ) => JSX.Element;\n} = {\n  [MODAL_NAMES.basketModal]: BasketModal,\n  [MODAL_NAMES.orderModal]: OrderModal,\n  [MODAL_NAMES.orderResult]: OrderResult,\n  [MODAL_NAMES.callModal]: CallModal,\n};\n\nconst CloseButton = styled.div`\n  position: absolute;\n  top: 40px;\n  right: 45px;\n  transition-duration: 0.3s;\n  cursor: pointer;\n  opacity: 0.5;\n\n  @media ${device.mobile} {\n    top: 10px;\n    right: 15px;\n  }\n\n  &:hover {\n    transform: scale(1.2);\n  }\n`;\n\nconst ModalRouter = () => {\n  const { closeModal, modalQueryParams } = useModal();\n  const [showModal, setShowModal] = useState<boolean>(true);\n\n  const onClose = () => {\n    setShowModal(false);\n    closeModal();\n  };\n\n  const ModalWindow = MODALS[modalQueryParams.modal as TModalName];\n\n  if (!ModalWindow) return null;\n  const { dialogClassName } = modalQueryParams;\n  return (\n    <Modal\n      show={showModal}\n      size=\"lg\"\n      centered\n      onHide={onClose}\n      dialogClassName={dialogClassName}\n    >\n      <ModalWrapper className=\"modal-wrapper\">\n        <CloseButton onClick={onClose}>\n          <img src={CloseIcon} alt=\"closeIcon\" />\n        </CloseButton>\n        <ModalWindow onClose={onClose} {...modalQueryParams} />\n      </ModalWrapper>\n    </Modal>\n  );\n};\n\nexport default ModalRouter;\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\n\ntype Props = {\n  isAuth: boolean;\n  path: string;\n  children: JSX.Element;\n};\n\nconst PrivateRoute = ({ isAuth, children, ...rest }: Props) => {\n  return (\n    <Route {...rest} render={() => (isAuth ? children : <Redirect to=\"/\" />)} />\n  );\n};\nexport default PrivateRoute;\n","import React, { Suspense, useContext } from \"react\";\n\nimport { Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport ModalPage from \"../modals/ModalRouter\";\nimport Logo from \"images/icons/logo.svg\";\n\nimport { AuthContext } from \"providers/AuthProvider\";\n\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst HomePageLazy = React.lazy(() => import(\"../pages/HomePage\"));\nconst LoginPageLazy = React.lazy(() => import(\"../pages/LoginPage\"));\nconst AdminPageLazy = React.lazy(() => import(\"../pages/AdminPage\"));\n\nconst fallback = (\n  <div id=\"float\">\n    <img alt=\"logo\" src={Logo} />\n  </div>\n);\n\nconst AllRoutes = () => {\n  const { authData } = useContext(AuthContext);\n  const location = useLocation<{ modal?: boolean }>();\n  const isModal = location.state?.modal;\n  const isAuth = !!authData;\n  return (\n    <Suspense fallback={fallback}>\n      <Switch>\n        <Route component={HomePageLazy} exact path=\"/\" />\n        <Route path=\"/login\" exact component={LoginPageLazy} />\n        <PrivateRoute path=\"/admin\" isAuth={isAuth}>\n          <AdminPageLazy />\n        </PrivateRoute>\n        <Route render={() => <Redirect to=\"/\" />} />\n      </Switch>\n      {isModal ? <Route path=\"/\" component={ModalPage} /> : null}\n    </Suspense>\n  );\n};\n\nexport default AllRoutes;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { ToastProvider } from \"react-toast-notifications\";\n\nimport ErrorBoundary from \"pages/ErrorBoundary\";\nimport Apollo from \"providers/Apollo\";\nimport AuthContext from \"providers/AuthProvider\";\nimport BasketProvider from \"providers/BasketProvider\";\n\nimport DataProvider from \"./providers/DataProvider\";\nimport Routes from \"./routes\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"slick-carousel/slick/slick.css\";\n\nexport const LOCATION_PROTOKOL = `https://`;\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <ToastProvider>\n        <AuthContext>\n          <Apollo>\n            <DataProvider>\n              <BasketProvider>\n                <Router>\n                  <Routes />\n                </Router>\n              </BasketProvider>\n            </DataProvider>\n          </Apollo>\n        </AuthContext>\n      </ToastProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/basketIcon.bc6a5387.svg\";","import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\n\nimport { colors } from \"ui/colors\";\n\ntype Props = {\n  value: number;\n  onChange: (value: number) => void;\n};\n\nconst CounterWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${colors.coffee};\n`;\n\nconst CountButton = styled.button`\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  font-size: 20px;\n  line-height: 1;\n  padding: 0;\n  border-radius: 50%;\n  color: ${colors.coffee};\n  background-color: ${colors.white};\n  border: 1px solid ${colors.coffee};\n  transition-duration: 0.3s;\n\n  &:hover {\n    text-shadow: 0 0 0.35px ${colors.coffee}, 0 0 0.35px ${colors.coffee};\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\n\nconst CounterValue = styled.div`\n  text-align: center;\n\n  input {\n    width: 32px;\n    height: 20px;\n    font-size: 16px;\n    margin: 0 3px;\n    color: ${colors.coffee};\n    border: 1px solid ${colors.coffee};\n    border-radius: 10px;\n    padding: 0px 5px;\n    text-align: center;\n    transition-duration: 0.3s;\n\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 3px rgba(120, 99, 84, 0.5);\n    }\n  }\n\n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Counter = ({ value, onChange }: Props) => {\n  const increment = useCallback(() => {\n    onChange(value + 1);\n  }, [onChange, value]);\n\n  const decrement = useCallback(() => {\n    onChange(value - 1);\n  }, [onChange, value]);\n\n  const onInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = +e.target.value;\n      if (value > 99) return;\n      if (typeof value === \"number\") {\n        onChange(Math.abs(value));\n      }\n    },\n    [onChange]\n  );\n\n  return (\n    <CounterWrapper>\n      <CountButton disabled={value < 1} onClick={decrement}>\n        -\n      </CountButton>\n      <CounterValue>\n        <input\n          type=\"number\"\n          onChange={onInputChange}\n          value={!!value ? value : \"\"}\n        />\n      </CounterValue>\n      <CountButton disabled={value >= 99} onClick={increment}>\n        +\n      </CountButton>\n    </CounterWrapper>\n  );\n};\n\nexport default Counter;\n","module.exports = __webpack_public_path__ + \"static/media/closeIcon.5fae5fda.svg\";","module.exports = __webpack_public_path__ + \"static/media/deleteIcon.e8e7ef56.svg\";","module.exports = __webpack_public_path__ + \"static/media/sadCat.cec97cb3.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import styled, { css } from \"styled-components\";\n\nimport { colors } from \"ui/colors\";\nimport { device } from \"ui/media\";\n\nimport { ButtonColor, ButtonSize } from \".\";\nimport { TButtonColor, TButtonSize } from \"./Button\";\n\nexport const StyledButton = styled.button<\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > & {\n    color: TButtonColor;\n    size: TButtonSize;\n  }\n>`\n  position: relative;\n  background-color: transparent;\n  border-radius: 60px;\n  border: none;\n  outline: none;\n  white-space: nowrap;\n  text-transform: uppercase;\n  transition-duration: 0.4s;\n  color: ${colors.coffee};\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n  ${({ color }) => {\n    switch (color) {\n      case ButtonColor.TRANSPARENT:\n        return css`\n          background-color: transparent;\n          border: 1px solid ${colors.white};\n\n          &:hover {\n            background-color: ${colors.white};\n            text-shadow: 0 0 0.65px ${colors.coffee},\n              0 0 0.65px ${colors.coffee};\n          }\n\n          &:active {\n            box-shadow: 0 0 8px 1px ${colors.white};\n          }\n        `;\n      case ButtonColor.WHITE_WITH_BORDER:\n        return css`\n          background-color: ${colors.white};\n          border: 1px solid ${colors.silk};\n\n          &:hover {\n            background-color: ${colors.silk};\n            color: ${colors.white};\n            text-shadow: 0 0 0.65px ${colors.white}, 0 0 0.65px ${colors.white};\n          }\n\n          &:active {\n            box-shadow: 0 0 8px 1px ${colors.white};\n          }\n        `;\n      case ButtonColor.COFFEE_GRADIENT:\n        return css`\n          background: linear-gradient(180deg, #f3ede9 0%, #dfcfc2 100%);\n          color: ${colors.coffee};\n\n          span {\n            position: relative;\n            z-index: 3;\n          }\n\n          :after {\n            position: absolute;\n            content: \"\";\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border-radius: 60px;\n            background: linear-gradient(180deg, #c1b3a8 0%, #957965 100%);\n            transition: opacity 0.3s;\n            z-index: 2;\n            opacity: 0;\n          }\n\n          &:hover {\n            color: ${colors.white};\n            text-shadow: 0 0 0.65px ${colors.white}, 0 0 0.65px ${colors.white};\n            filter: drop-shadow(0px 4px 20px rgba(193, 179, 168, 0.5));\n            &:after {\n              opacity: 1;\n            }\n          }\n\n          &:active {\n            box-shadow: 0 0 4px 0px #c1b3a8;\n          }\n        `;\n      case ButtonColor.WHITE:\n        return css`\n          background: ${colors.white};\n\n          span {\n            position: relative;\n            z-index: 3;\n          }\n\n          :after {\n            position: absolute;\n            content: \"\";\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border-radius: 60px;\n            background: linear-gradient(180deg, #c1b3a8 0%, #957965 100%);\n            transition: opacity 0.3s;\n            z-index: 2;\n            opacity: 0;\n          }\n\n          &:hover {\n            color: ${colors.white};\n            text-shadow: 0 0 0.65px ${colors.white}, 0 0 0.65px ${colors.white};\n            filter: drop-shadow(0px 4px 20px rgba(193, 179, 168, 0.5));\n            &:after {\n              opacity: 1;\n            }\n          }\n\n          &:active {\n            box-shadow: 0 0 4px 0px #c1b3a8;\n          }\n        `;\n      default:\n        break;\n    }\n  }}\n  ${({ size }) => {\n    switch (size) {\n      case ButtonSize.LARGE:\n        return css`\n          width: 260px;\n          height: 60px;\n          font-weight: 600;\n          font-size: 16px;\n          line-height: 16px;\n\n          @media ${device.tablet} {\n            width: 175px;\n            height: 45px;\n            font-size: 14px;\n          }\n        `;\n      case ButtonSize.SMALL:\n        return css`\n          width: 170px;\n          height: 40px;\n          font-weight: 500;\n          font-size: 14px;\n          line-height: 14px;\n\n          @media ${device.tablet} {\n            width: 130px;\n            height: 40px;\n            font-size: 14px;\n          }\n        `;\n      default:\n        break;\n    }\n  }}\n`;\n","import React from \"react\";\n\nimport { StyledButton } from \"./Button.styled\";\n\ntype Props = React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n> & {\n  text: string;\n  color: TButtonColor;\n  size: TButtonSize;\n  onClick?: () => void;\n  className?: string;\n};\n\nexport const ButtonColor = {\n  TRANSPARENT: \"transparent\",\n  WHITE: \"white\",\n  LIGHT: \"light\",\n  WHITE_WITH_BORDER: \"whiteWithBorder\",\n  COFFEE_GRADIENT: \"coffee-gradient\",\n} as const;\n\nexport type TButtonColor = typeof ButtonColor[keyof typeof ButtonColor];\n\nexport const ButtonSize = {\n  SMALL: \"SMALL\",\n  LARGE: \"LARGE\",\n} as const;\n\nexport type TButtonSize = keyof typeof ButtonSize;\n\nconst Button = ({\n  color,\n  size,\n  text,\n  className,\n  onClick,\n  ...buttonProps\n}: Props) => {\n  const { disabled } = buttonProps;\n\n  return (\n    <StyledButton\n      size={size}\n      color={color}\n      onClick={onClick}\n      disabled={disabled}\n      className={className}\n    >\n      <span>{text}</span>\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport BIcon from \"images/icons/basketIcon.svg\";\nimport useModal from \"modals/hooks\";\nimport { BasketContext } from \"providers/BasketProvider\";\nimport { colors } from \"ui/colors\";\n\ntype Props = {\n  whiteIndicator?: boolean;\n  className?: string;\n};\n\nconst BasketIndicator = styled.div`\n  position: absolute;\n  z-index: 3;\n  top: -10px;\n  left: 20px;\n  width: 25px;\n  height: 25px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 25px;\n  line-height: 1;\n  font-size: 14px;\n  font-weight: 500;\n  transition-duration: 0.3s;\n  color: ${colors.white};\n  background-color: #c94c4c;\n\n  &.large {\n    box-shadow: 0 0 10px 3px ${colors.vividTangerine};\n  }\n`;\n\nconst BasketIconWrapper = styled.div<{ whiteIndicator: boolean | undefined }>`\n  position: relative;\n  transition-duration: 0.3s;\n  cursor: pointer;\n\n  img {\n    transition-duration: 0.3s;\n  }\n\n  &:hover {\n    img {\n      transform: scale(1.1);\n    }\n  }\n\n  ${({ whiteIndicator }) =>\n    whiteIndicator &&\n    css`\n      ${BasketIndicator} {\n        background-color: ${colors.white};\n        color: ${colors.coffee};\n      }\n    `}\n`;\n\nconst BasketIcon = ({ whiteIndicator, className }: Props) => {\n  const indicator = useRef<HTMLDivElement>(null);\n  const { openModal } = useModal();\n  const { basketValues } = useContext(BasketContext);\n  const basketValuesLength = Object.keys(basketValues).length;\n\n  useEffect(() => {\n    if (indicator.current) {\n      indicator.current.classList.add(\"large\");\n      setTimeout(() => {\n        indicator.current?.classList.remove(\"large\");\n      }, 300);\n    }\n  }, [basketValues]);\n\n  return (\n    <BasketIconWrapper\n      onClick={() => openModal(\"backetModal\")}\n      className={className}\n      whiteIndicator={whiteIndicator}\n    >\n      {!!basketValuesLength && (\n        <BasketIndicator ref={indicator}>{basketValuesLength}</BasketIndicator>\n      )}\n      <img src={BIcon} alt=\"BasketIcon\" />\n    </BasketIconWrapper>\n  );\n};\n\nexport default BasketIcon;\n","export const size = {\n  mobile: \"768px\",\n  tablet: \"992px\",\n};\n\nexport const device = {\n  mobile: `(max-width: ${size.mobile})`,\n  tablet: `(max-width: ${size.tablet})`,\n};\n","import React, { ReactNode, useContext, useMemo, useState } from \"react\";\n\nimport { DataContext } from \"./DataProvider\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport type BasketValue = { [key in ID]: number };\n\ntype BasketContext = {\n  totalPrice: number;\n  deliveryPrice: number;\n  basketValues: BasketValue;\n  clearBasket: () => void;\n  deleteBasketValue: (id: ID) => void;\n  addBasketValue: (basketValue: BasketValue) => void;\n};\n\nexport const BasketContext = React.createContext<BasketContext>({\n  totalPrice: 0,\n  deliveryPrice: 0,\n  basketValues: {},\n  clearBasket: () => {},\n  addBasketValue: () => {},\n  deleteBasketValue: () => {},\n});\n\nconst BasketProvider = ({ children }: Props) => {\n  const { products } = useContext(DataContext);\n  const [basketValues, setBasketValues] = useState<BasketValue>({});\n\n  const addBasketValue = (basketValue: BasketValue) => {\n    setBasketValues((pV) => ({ ...pV, ...basketValue }));\n  };\n\n  const deleteBasketValue = (id: ID) => {\n    if (basketValues[id]) {\n      const copyBasketValues = { ...basketValues };\n      delete copyBasketValues[id];\n      setBasketValues(copyBasketValues);\n    }\n  };\n\n  const totalPrice: number = useMemo(() => {\n    const basketProductsIds = Object.keys(basketValues);\n    const hasBasketItems: boolean = !!basketProductsIds.length;\n    let price = 0;\n    if (hasBasketItems) {\n      basketProductsIds.forEach((key) => {\n        const product = products.find(({ id }) => id === key);\n        if (product) {\n          price += product.price * basketValues[key];\n        }\n      });\n    }\n    return +price.toFixed(2);\n  }, [basketValues, products]);\n\n  const deliveryPrice: number = useMemo(() => {\n    if (totalPrice >= 40) {\n      return 0;\n    } else {\n      return 4;\n    }\n  }, [totalPrice]);\n\n  const clearBasket = () => {\n    setBasketValues({});\n  };\n\n  return (\n    <BasketContext.Provider\n      value={{\n        totalPrice,\n        clearBasket,\n        basketValues,\n        deliveryPrice,\n        addBasketValue,\n        deleteBasketValue,\n      }}\n    >\n      {children}\n    </BasketContext.Provider>\n  );\n};\n\nexport default BasketProvider;\n","import { useMemo } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const MODAL_NAMES = {\n  orderModal: \"orderModal\",\n  basketModal: \"backetModal\",\n  orderResult: \"orderResult\",\n  callModal: \"callModal\",\n} as const;\n\nexport type TModalName = typeof MODAL_NAMES[keyof typeof MODAL_NAMES];\n\ntype SearchParams = { [key: string]: any } | undefined;\n\nconst useModal = () => {\n  const history = useHistory();\n\n  const { pathname, search } = useLocation();\n\n  const openModal = (modalName: TModalName, searchParams?: SearchParams) => {\n    const parsedSearchParams = getUrlParams({\n      modal: modalName,\n      ...searchParams,\n    });\n    history.push(`${pathname}${parsedSearchParams}`, {\n      modal: true,\n    });\n  };\n\n  const closeModal = () => {\n    history.push(pathname, {\n      modal: false,\n    });\n  };\n\n  const modalQueryParams = useMemo(() => {\n    if (!search) return {};\n    const correactedSearch = search.substring(1);\n    const result = JSON.parse(\n      '{\"' +\n        decodeURI(correactedSearch)\n          .replace(/\"/g, '\\\\\"')\n          .replace(/&/g, '\",\"')\n          .replace(/=/g, '\":\"') +\n        '\"}'\n    );\n    return result;\n  }, [search]);\n\n  return { openModal, closeModal, modalQueryParams };\n};\n\nconst getUrlParams = (searchParams: SearchParams): string => {\n  if (!searchParams || !Object.keys(searchParams).length) {\n    return \"\";\n  } else {\n    const urlParams = new URLSearchParams(searchParams).toString();\n    return \"?\" + urlParams;\n  }\n};\n\nexport default useModal;\n","import styled from \"styled-components\";\n\nimport { device } from \"./media\";\n\nexport const H2 = styled.h2`\n  font-size: 50px;\n  font-weight: 700;\n\n  @media ${device.tablet} {\n    font-size: 36px;\n  }\n`;\n\nexport const H3 = styled.h3`\n  font-size: 36px;\n  font-weight: 700;\n\n  @media ${device.tablet} {\n    font-size: 24px;\n  }\n`;\n\nexport const H5 = styled.h5`\n  font-size: 17px;\n  font-weight: 800;\n`;\n","export const colors: { [key in COLORS]: string } = {\n  silk: \"#C1B3A8\",\n  seashellPeach: \"#FFF7F1\",\n  coffee: \"#786354\",\n  white: \"#fff\",\n  wafer: \"#DECCC0\",\n  thatch: \"#B9A698\",\n  dawnPink: \"#F0E9E3\",\n  black: \"#000000\",\n  gray: \"#808080\",\n  mercury: \"#E6E6E6\",\n  roseWhite: \"#FFFCFC\",\n  ebb: \"#ECE8E5\",\n  vividTangerine: \"#FF8C85\",\n};\n\ntype COLORS =\n  | \"ebb\"\n  | \"gray\"\n  | \"silk\"\n  | \"black\"\n  | \"white\"\n  | \"wafer\"\n  | \"coffee\"\n  | \"thatch\"\n  | \"mercury\"\n  | \"roseWhite\"\n  | \"dawnPink\"\n  | \"seashellPeach\"\n  | \"vividTangerine\";\n","import React, { ReactNode, useState } from \"react\";\n\nimport { AuthenticateDataFragment } from \"generated/graphql\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const AuthContext = React.createContext<{\n  isAdmin: boolean;\n  authData?: AuthenticateDataFragment;\n  setAuthData: (authData: AuthenticateDataFragment) => void;\n}>({\n  isAdmin: false,\n  authData: undefined,\n  setAuthData: () => {},\n});\n\nconst AuthProvider = ({ children }: Props) => {\n  const [authData, setAuthData] = useState<\n    AuthenticateDataFragment | undefined\n  >(undefined);\n\n  const authSessionLogin = sessionStorage.getItem(\"login\");\n\n  if (authSessionLogin && !authData) {\n    const authDataSession = JSON.parse(authSessionLogin);\n    if (\"accessToken\" in authDataSession) {\n      setAuthData(authDataSession);\n    }\n  }\n\n  const isAdmin = !!authData?.authorities.includes(\"ROLE_ADMIN\");\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAdmin,\n        authData,\n        setAuthData,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** Built-in java.math.BigDecimal */\n  BigDecimal: any;\n  Upload: any;\n};\n\n\nexport type CallRequestInput = {\n  name: Scalars['String'];\n  phone: Scalars['String'];\n};\n\nexport type CategoryDto = {\n  __typename?: 'CategoryDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type CategoryInputDto = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type CredentialsInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type CustomerDto = {\n  __typename?: 'CustomerDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  phone: Scalars['String'];\n  street: Scalars['String'];\n  house: Scalars['String'];\n  building: Scalars['String'];\n  frontDoor: Scalars['String'];\n  floor: Scalars['String'];\n  flat: Scalars['String'];\n};\n\nexport type CustomerInputDto = {\n  name: Scalars['String'];\n  phone: Scalars['String'];\n  street: Scalars['String'];\n  house: Scalars['String'];\n  building: Scalars['String'];\n  frontDoor: Scalars['String'];\n  floor: Scalars['String'];\n  flat: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /**\n   * catdog-service\n   *     product\n   */\n  saveNewProduct?: Maybe<ProductDto>;\n  updateProduct?: Maybe<ProductDto>;\n  deleteProduct: Payload;\n  /** productImage */\n  updateMainImageById?: Maybe<ProductDto>;\n  addNewImages?: Maybe<ProductDto>;\n  /** category */\n  saveNewCategory: CategoryDto;\n  updateCategory: CategoryDto;\n  deleteCategory: Payload;\n  /**\n   * catdog-order-service\n   *    product-order\n   */\n  placeOrder: ProductOrderDto;\n};\n\n\nexport type MutationSaveNewProductArgs = {\n  productInputDTO: ProductInputDto;\n};\n\n\nexport type MutationUpdateProductArgs = {\n  productId: Scalars['String'];\n  productInputDTO: ProductInputDto;\n};\n\n\nexport type MutationDeleteProductArgs = {\n  productId: Scalars['String'];\n};\n\n\nexport type MutationUpdateMainImageByIdArgs = {\n  imageId: Scalars['String'];\n  main: Scalars['Boolean'];\n};\n\n\nexport type MutationAddNewImagesArgs = {\n  images: Array<Scalars['Upload']>;\n  productId: Scalars['String'];\n};\n\n\nexport type MutationSaveNewCategoryArgs = {\n  categoryInputDTO: CategoryInputDto;\n};\n\n\nexport type MutationUpdateCategoryArgs = {\n  categoryId: Scalars['String'];\n  categoryInputDTO: CategoryInputDto;\n};\n\n\nexport type MutationDeleteCategoryArgs = {\n  categoryId: Scalars['String'];\n};\n\n\nexport type MutationPlaceOrderArgs = {\n  productOrderInputDTO: ProductOrderInputDto;\n};\n\nexport type OAuth2AccessTokenDto = {\n  __typename?: 'OAuth2AccessTokenDTO';\n  accessToken: Scalars['String'];\n  tokenType: Scalars['String'];\n  refreshToken: Scalars['String'];\n  expiresIn: Scalars['Int'];\n  scope: Array<Scalars['String']>;\n  authenticationName: Scalars['String'];\n  authorities: Array<Scalars['String']>;\n  jti: Scalars['String'];\n};\n\nexport type PageProductOrderDto = {\n  __typename?: 'PageProductOrderDTO';\n  content: Array<ProductOrderDto>;\n  pageable: PageableDto;\n  totalPages: Scalars['Int'];\n  last: Scalars['Boolean'];\n  totalElements: Scalars['Int'];\n  first: Scalars['Boolean'];\n  number: Scalars['Int'];\n  sort: SortDto;\n  numberOfElements: Scalars['Int'];\n  size: Scalars['Int'];\n  empty: Scalars['Boolean'];\n};\n\nexport type PageableDto = {\n  __typename?: 'PageableDTO';\n  sort: SortDto;\n  pageNumber: Scalars['Int'];\n  pageSize: Scalars['Int'];\n  offset: Scalars['Int'];\n  paged: Scalars['Boolean'];\n  unpaged: Scalars['Boolean'];\n};\n\nexport type Payload = {\n  __typename?: 'Payload';\n  status: Scalars['Int'];\n};\n\nexport type ProductDto = {\n  __typename?: 'ProductDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description?: Maybe<Scalars['String']>;\n  stock: Scalars['Boolean'];\n  categoryId: Scalars['String'];\n  costPer: Scalars['String'];\n  images: Array<ProductImageDto>;\n  position: Scalars['Int'];\n};\n\nexport type ProductImageDto = {\n  __typename?: 'ProductImageDTO';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  main: Scalars['Boolean'];\n  uri: Scalars['String'];\n  productId: Scalars['String'];\n  type: Scalars['String'];\n};\n\nexport type ProductInputDto = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description: Scalars['String'];\n  stock: Scalars['Boolean'];\n  categoryId: Scalars['String'];\n  costPer: Scalars['String'];\n  position: Scalars['Int'];\n};\n\nexport type ProductOrderDto = {\n  __typename?: 'ProductOrderDTO';\n  id: Scalars['String'];\n  customer: CustomerDto;\n  productOrderLines: Array<ProductOrderLineDto>;\n  orderStatus: Scalars['String'];\n  deliveryTime: Scalars['String'];\n  createdDate: Scalars['String'];\n  comment?: Maybe<Scalars['String']>;\n};\n\nexport type ProductOrderInputDto = {\n  customer: CustomerInputDto;\n  productOrderLines: Array<ProductOrderLineInputDto>;\n  deliveryTime: Scalars['String'];\n  comment?: Maybe<Scalars['String']>;\n};\n\nexport type ProductOrderLineDto = {\n  __typename?: 'ProductOrderLineDTO';\n  id: Scalars['String'];\n  productId: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description: Scalars['String'];\n  costPer: Scalars['String'];\n  orderQuantity: Scalars['Int'];\n};\n\nexport type ProductOrderLineInputDto = {\n  productId: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  description: Scalars['String'];\n  costPer: Scalars['String'];\n  orderQuantity: Scalars['Int'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /**\n   * catdog-service\n   *     product\n   */\n  listProduct: Array<ProductDto>;\n  productById?: Maybe<ProductDto>;\n  /** category */\n  listCategory: Array<CategoryDto>;\n  categoryById: CategoryDto;\n  /** catdog-order-service */\n  findAllOrders: PageProductOrderDto;\n  /** authentication-service */\n  authenticate: OAuth2AccessTokenDto;\n  refreshToken: OAuth2AccessTokenDto;\n  /** telegram */\n  callRequest: Payload;\n};\n\n\nexport type QueryProductByIdArgs = {\n  productId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCategoryByIdArgs = {\n  categoryId: Scalars['String'];\n};\n\n\nexport type QueryFindAllOrdersArgs = {\n  page?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['String']>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryAuthenticateArgs = {\n  credentialsInput: CredentialsInput;\n};\n\n\nexport type QueryRefreshTokenArgs = {\n  refreshToken: Scalars['String'];\n};\n\n\nexport type QueryCallRequestArgs = {\n  callRequestInput?: Maybe<CallRequestInput>;\n};\n\nexport type SortDto = {\n  __typename?: 'SortDTO';\n  sorted: Scalars['Boolean'];\n  unsorted: Scalars['Boolean'];\n  empty: Scalars['Boolean'];\n};\n\n\nexport type AuthenticateDataFragment = (\n  { __typename?: 'OAuth2AccessTokenDTO' }\n  & Pick<OAuth2AccessTokenDto, 'tokenType' | 'accessToken' | 'authorities' | 'authenticationName'>\n);\n\nexport type AuthenticateQueryVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type AuthenticateQuery = (\n  { __typename?: 'Query' }\n  & { authenticate: (\n    { __typename?: 'OAuth2AccessTokenDTO' }\n    & AuthenticateDataFragment\n  ) }\n);\n\nexport type CallRequestQueryVariables = Exact<{\n  name: Scalars['String'];\n  phone: Scalars['String'];\n}>;\n\n\nexport type CallRequestQuery = (\n  { __typename?: 'Query' }\n  & { callRequest: (\n    { __typename?: 'Payload' }\n    & Pick<Payload, 'status'>\n  ) }\n);\n\nexport type CategoryItemFragment = (\n  { __typename?: 'CategoryDTO' }\n  & Pick<CategoryDto, 'id' | 'name' | 'description'>\n);\n\nexport type CategoryQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type CategoryQuery = (\n  { __typename?: 'Query' }\n  & { categoryById: (\n    { __typename?: 'CategoryDTO' }\n    & CategoryItemFragment\n  ) }\n);\n\nexport type UpdateCategoryMutationVariables = Exact<{\n  id: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type UpdateCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCategory: (\n    { __typename?: 'CategoryDTO' }\n    & Pick<CategoryDto, 'id'>\n  ) }\n);\n\nexport type AddNewCategoryMutationVariables = Exact<{\n  name: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type AddNewCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { saveNewCategory: (\n    { __typename?: 'CategoryDTO' }\n    & Pick<CategoryDto, 'id'>\n  ) }\n);\n\nexport type DeleteCategoryMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteCategory: (\n    { __typename?: 'Payload' }\n    & Pick<Payload, 'status'>\n  ) }\n);\n\nexport type CategoriesAndProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CategoriesAndProductsQuery = (\n  { __typename?: 'Query' }\n  & { listCategory: Array<(\n    { __typename?: 'CategoryDTO' }\n    & CategoryItemFragment\n  )>, listProduct: Array<(\n    { __typename?: 'ProductDTO' }\n    & ProductItemFragment\n  )> }\n);\n\nexport type PlaceOrderMutationVariables = Exact<{\n  comment: Scalars['String'];\n  deliveryTime: Scalars['String'];\n  customer: CustomerInputDto;\n  productOrderLines: Array<ProductOrderLineInputDto>;\n}>;\n\n\nexport type PlaceOrderMutation = (\n  { __typename?: 'Mutation' }\n  & { placeOrder: (\n    { __typename?: 'ProductOrderDTO' }\n    & Pick<ProductOrderDto, 'id'>\n  ) }\n);\n\nexport type OrderContentItemFragment = (\n  { __typename?: 'ProductOrderDTO' }\n  & Pick<ProductOrderDto, 'id' | 'deliveryTime' | 'createdDate'>\n  & { customer: (\n    { __typename?: 'CustomerDTO' }\n    & Pick<CustomerDto, 'id' | 'name' | 'phone' | 'street' | 'house' | 'building' | 'frontDoor' | 'floor' | 'flat'>\n  ), productOrderLines: Array<(\n    { __typename?: 'ProductOrderLineDTO' }\n    & Pick<ProductOrderLineDto, 'id' | 'productId' | 'name' | 'price' | 'description' | 'costPer' | 'orderQuantity'>\n  )> }\n);\n\nexport type FindAllOrdersQueryVariables = Exact<{\n  page?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['String']>;\n  sort?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindAllOrdersQuery = (\n  { __typename?: 'Query' }\n  & { findAllOrders: (\n    { __typename?: 'PageProductOrderDTO' }\n    & Pick<PageProductOrderDto, 'last' | 'first' | 'number' | 'totalPages' | 'totalElements'>\n    & { content: Array<(\n      { __typename?: 'ProductOrderDTO' }\n      & OrderContentItemFragment\n    )> }\n  ) }\n);\n\nexport type ProductItemFragment = (\n  { __typename?: 'ProductDTO' }\n  & Pick<ProductDto, 'id' | 'name' | 'stock' | 'price' | 'costPer' | 'position' | 'categoryId' | 'description'>\n  & { images: Array<(\n    { __typename?: 'ProductImageDTO' }\n    & Pick<ProductImageDto, 'id' | 'uri' | 'name' | 'main' | 'productId'>\n  )> }\n);\n\nexport type AddNewProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  position: Scalars['Int'];\n  stock: Scalars['Boolean'];\n  costPer: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  categoryId: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type AddNewProductMutation = (\n  { __typename?: 'Mutation' }\n  & { saveNewProduct?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & Pick<ProductDto, 'id'>\n  )> }\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  id: Scalars['String'];\n  name: Scalars['String'];\n  position: Scalars['Int'];\n  stock: Scalars['Boolean'];\n  costPer: Scalars['String'];\n  price: Scalars['BigDecimal'];\n  categoryId: Scalars['String'];\n  description: Scalars['String'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProduct?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & Pick<ProductDto, 'id'>\n  )> }\n);\n\nexport type AddNewImagesMutationVariables = Exact<{\n  images: Array<Scalars['Upload']>;\n  productId: Scalars['String'];\n}>;\n\n\nexport type AddNewImagesMutation = (\n  { __typename?: 'Mutation' }\n  & { addNewImages?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & Pick<ProductDto, 'id'>\n    & { images: Array<(\n      { __typename?: 'ProductImageDTO' }\n      & Pick<ProductImageDto, 'id'>\n    )> }\n  )> }\n);\n\nexport type ProductQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type ProductQuery = (\n  { __typename?: 'Query' }\n  & { productById?: Maybe<(\n    { __typename?: 'ProductDTO' }\n    & ProductItemFragment\n  )> }\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteProduct: (\n    { __typename?: 'Payload' }\n    & Pick<Payload, 'status'>\n  ) }\n);\n\nexport const AuthenticateDataFragmentDoc = gql`\n    fragment AuthenticateData on OAuth2AccessTokenDTO {\n  tokenType\n  accessToken\n  authorities\n  authenticationName\n}\n    `;\nexport const CategoryItemFragmentDoc = gql`\n    fragment CategoryItem on CategoryDTO {\n  id\n  name\n  description\n}\n    `;\nexport const OrderContentItemFragmentDoc = gql`\n    fragment OrderContentItem on ProductOrderDTO {\n  id\n  deliveryTime\n  deliveryTime\n  createdDate\n  customer {\n    id\n    name\n    phone\n    street\n    house\n    building\n    frontDoor\n    floor\n    flat\n  }\n  productOrderLines {\n    id\n    productId\n    name\n    price\n    description\n    costPer\n    orderQuantity\n  }\n}\n    `;\nexport const ProductItemFragmentDoc = gql`\n    fragment ProductItem on ProductDTO {\n  id\n  name\n  stock\n  price\n  costPer\n  position\n  categoryId\n  description\n  images {\n    id\n    uri\n    name\n    main\n    productId\n  }\n}\n    `;\nexport const AuthenticateDocument = gql`\n    query authenticate($username: String!, $password: String!) {\n  authenticate(credentialsInput: {username: $username, password: $password}) {\n    ...AuthenticateData\n  }\n}\n    ${AuthenticateDataFragmentDoc}`;\n\n/**\n * __useAuthenticateQuery__\n *\n * To run a query within a React component, call `useAuthenticateQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthenticateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthenticateQuery({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useAuthenticateQuery(baseOptions?: Apollo.QueryHookOptions<AuthenticateQuery, AuthenticateQueryVariables>) {\n        return Apollo.useQuery<AuthenticateQuery, AuthenticateQueryVariables>(AuthenticateDocument, baseOptions);\n      }\nexport function useAuthenticateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuthenticateQuery, AuthenticateQueryVariables>) {\n          return Apollo.useLazyQuery<AuthenticateQuery, AuthenticateQueryVariables>(AuthenticateDocument, baseOptions);\n        }\nexport type AuthenticateQueryHookResult = ReturnType<typeof useAuthenticateQuery>;\nexport type AuthenticateLazyQueryHookResult = ReturnType<typeof useAuthenticateLazyQuery>;\nexport type AuthenticateQueryResult = Apollo.QueryResult<AuthenticateQuery, AuthenticateQueryVariables>;\nexport const CallRequestDocument = gql`\n    query callRequest($name: String!, $phone: String!) {\n  callRequest(callRequestInput: {name: $name, phone: $phone}) {\n    status\n  }\n}\n    `;\n\n/**\n * __useCallRequestQuery__\n *\n * To run a query within a React component, call `useCallRequestQuery` and pass it any options that fit your needs.\n * When your component renders, `useCallRequestQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCallRequestQuery({\n *   variables: {\n *      name: // value for 'name'\n *      phone: // value for 'phone'\n *   },\n * });\n */\nexport function useCallRequestQuery(baseOptions?: Apollo.QueryHookOptions<CallRequestQuery, CallRequestQueryVariables>) {\n        return Apollo.useQuery<CallRequestQuery, CallRequestQueryVariables>(CallRequestDocument, baseOptions);\n      }\nexport function useCallRequestLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CallRequestQuery, CallRequestQueryVariables>) {\n          return Apollo.useLazyQuery<CallRequestQuery, CallRequestQueryVariables>(CallRequestDocument, baseOptions);\n        }\nexport type CallRequestQueryHookResult = ReturnType<typeof useCallRequestQuery>;\nexport type CallRequestLazyQueryHookResult = ReturnType<typeof useCallRequestLazyQuery>;\nexport type CallRequestQueryResult = Apollo.QueryResult<CallRequestQuery, CallRequestQueryVariables>;\nexport const CategoryDocument = gql`\n    query Category($id: String!) {\n  categoryById(categoryId: $id) {\n    ...CategoryItem\n  }\n}\n    ${CategoryItemFragmentDoc}`;\n\n/**\n * __useCategoryQuery__\n *\n * To run a query within a React component, call `useCategoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCategoryQuery(baseOptions?: Apollo.QueryHookOptions<CategoryQuery, CategoryQueryVariables>) {\n        return Apollo.useQuery<CategoryQuery, CategoryQueryVariables>(CategoryDocument, baseOptions);\n      }\nexport function useCategoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoryQuery, CategoryQueryVariables>) {\n          return Apollo.useLazyQuery<CategoryQuery, CategoryQueryVariables>(CategoryDocument, baseOptions);\n        }\nexport type CategoryQueryHookResult = ReturnType<typeof useCategoryQuery>;\nexport type CategoryLazyQueryHookResult = ReturnType<typeof useCategoryLazyQuery>;\nexport type CategoryQueryResult = Apollo.QueryResult<CategoryQuery, CategoryQueryVariables>;\nexport const UpdateCategoryDocument = gql`\n    mutation UpdateCategory($id: String!, $name: String!, $description: String!) {\n  updateCategory(categoryId: $id, categoryInputDTO: {name: $name, description: $description}) {\n    id\n  }\n}\n    `;\nexport type UpdateCategoryMutationFn = Apollo.MutationFunction<UpdateCategoryMutation, UpdateCategoryMutationVariables>;\n\n/**\n * __useUpdateCategoryMutation__\n *\n * To run a mutation, you first call `useUpdateCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCategoryMutation, { data, loading, error }] = useUpdateCategoryMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useUpdateCategoryMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>) {\n        return Apollo.useMutation<UpdateCategoryMutation, UpdateCategoryMutationVariables>(UpdateCategoryDocument, baseOptions);\n      }\nexport type UpdateCategoryMutationHookResult = ReturnType<typeof useUpdateCategoryMutation>;\nexport type UpdateCategoryMutationResult = Apollo.MutationResult<UpdateCategoryMutation>;\nexport type UpdateCategoryMutationOptions = Apollo.BaseMutationOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>;\nexport const AddNewCategoryDocument = gql`\n    mutation AddNewCategory($name: String!, $description: String!) {\n  saveNewCategory(categoryInputDTO: {name: $name, description: $description}) {\n    id\n  }\n}\n    `;\nexport type AddNewCategoryMutationFn = Apollo.MutationFunction<AddNewCategoryMutation, AddNewCategoryMutationVariables>;\n\n/**\n * __useAddNewCategoryMutation__\n *\n * To run a mutation, you first call `useAddNewCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNewCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNewCategoryMutation, { data, loading, error }] = useAddNewCategoryMutation({\n *   variables: {\n *      name: // value for 'name'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useAddNewCategoryMutation(baseOptions?: Apollo.MutationHookOptions<AddNewCategoryMutation, AddNewCategoryMutationVariables>) {\n        return Apollo.useMutation<AddNewCategoryMutation, AddNewCategoryMutationVariables>(AddNewCategoryDocument, baseOptions);\n      }\nexport type AddNewCategoryMutationHookResult = ReturnType<typeof useAddNewCategoryMutation>;\nexport type AddNewCategoryMutationResult = Apollo.MutationResult<AddNewCategoryMutation>;\nexport type AddNewCategoryMutationOptions = Apollo.BaseMutationOptions<AddNewCategoryMutation, AddNewCategoryMutationVariables>;\nexport const DeleteCategoryDocument = gql`\n    mutation DeleteCategory($id: String!) {\n  deleteCategory(categoryId: $id) {\n    status\n  }\n}\n    `;\nexport type DeleteCategoryMutationFn = Apollo.MutationFunction<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\n\n/**\n * __useDeleteCategoryMutation__\n *\n * To run a mutation, you first call `useDeleteCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCategoryMutation, { data, loading, error }] = useDeleteCategoryMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCategoryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>) {\n        return Apollo.useMutation<DeleteCategoryMutation, DeleteCategoryMutationVariables>(DeleteCategoryDocument, baseOptions);\n      }\nexport type DeleteCategoryMutationHookResult = ReturnType<typeof useDeleteCategoryMutation>;\nexport type DeleteCategoryMutationResult = Apollo.MutationResult<DeleteCategoryMutation>;\nexport type DeleteCategoryMutationOptions = Apollo.BaseMutationOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\nexport const CategoriesAndProductsDocument = gql`\n    query CategoriesAndProducts {\n  listCategory {\n    ...CategoryItem\n  }\n  listProduct {\n    ...ProductItem\n  }\n}\n    ${CategoryItemFragmentDoc}\n${ProductItemFragmentDoc}`;\n\n/**\n * __useCategoriesAndProductsQuery__\n *\n * To run a query within a React component, call `useCategoriesAndProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesAndProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesAndProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCategoriesAndProductsQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>) {\n        return Apollo.useQuery<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>(CategoriesAndProductsDocument, baseOptions);\n      }\nexport function useCategoriesAndProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>) {\n          return Apollo.useLazyQuery<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>(CategoriesAndProductsDocument, baseOptions);\n        }\nexport type CategoriesAndProductsQueryHookResult = ReturnType<typeof useCategoriesAndProductsQuery>;\nexport type CategoriesAndProductsLazyQueryHookResult = ReturnType<typeof useCategoriesAndProductsLazyQuery>;\nexport type CategoriesAndProductsQueryResult = Apollo.QueryResult<CategoriesAndProductsQuery, CategoriesAndProductsQueryVariables>;\nexport const PlaceOrderDocument = gql`\n    mutation PlaceOrder($comment: String!, $deliveryTime: String!, $customer: CustomerInputDTO!, $productOrderLines: [ProductOrderLineInputDTO!]!) {\n  placeOrder(productOrderInputDTO: {comment: $comment, customer: $customer, productOrderLines: $productOrderLines, deliveryTime: $deliveryTime}) {\n    id\n  }\n}\n    `;\nexport type PlaceOrderMutationFn = Apollo.MutationFunction<PlaceOrderMutation, PlaceOrderMutationVariables>;\n\n/**\n * __usePlaceOrderMutation__\n *\n * To run a mutation, you first call `usePlaceOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePlaceOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [placeOrderMutation, { data, loading, error }] = usePlaceOrderMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      deliveryTime: // value for 'deliveryTime'\n *      customer: // value for 'customer'\n *      productOrderLines: // value for 'productOrderLines'\n *   },\n * });\n */\nexport function usePlaceOrderMutation(baseOptions?: Apollo.MutationHookOptions<PlaceOrderMutation, PlaceOrderMutationVariables>) {\n        return Apollo.useMutation<PlaceOrderMutation, PlaceOrderMutationVariables>(PlaceOrderDocument, baseOptions);\n      }\nexport type PlaceOrderMutationHookResult = ReturnType<typeof usePlaceOrderMutation>;\nexport type PlaceOrderMutationResult = Apollo.MutationResult<PlaceOrderMutation>;\nexport type PlaceOrderMutationOptions = Apollo.BaseMutationOptions<PlaceOrderMutation, PlaceOrderMutationVariables>;\nexport const FindAllOrdersDocument = gql`\n    query FindAllOrders($page: String, $size: String, $sort: String) {\n  findAllOrders(page: $page, size: $size, sort: $sort) {\n    content {\n      ...OrderContentItem\n    }\n    last\n    first\n    number\n    totalPages\n    totalElements\n  }\n}\n    ${OrderContentItemFragmentDoc}`;\n\n/**\n * __useFindAllOrdersQuery__\n *\n * To run a query within a React component, call `useFindAllOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindAllOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindAllOrdersQuery({\n *   variables: {\n *      page: // value for 'page'\n *      size: // value for 'size'\n *      sort: // value for 'sort'\n *   },\n * });\n */\nexport function useFindAllOrdersQuery(baseOptions?: Apollo.QueryHookOptions<FindAllOrdersQuery, FindAllOrdersQueryVariables>) {\n        return Apollo.useQuery<FindAllOrdersQuery, FindAllOrdersQueryVariables>(FindAllOrdersDocument, baseOptions);\n      }\nexport function useFindAllOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindAllOrdersQuery, FindAllOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<FindAllOrdersQuery, FindAllOrdersQueryVariables>(FindAllOrdersDocument, baseOptions);\n        }\nexport type FindAllOrdersQueryHookResult = ReturnType<typeof useFindAllOrdersQuery>;\nexport type FindAllOrdersLazyQueryHookResult = ReturnType<typeof useFindAllOrdersLazyQuery>;\nexport type FindAllOrdersQueryResult = Apollo.QueryResult<FindAllOrdersQuery, FindAllOrdersQueryVariables>;\nexport const AddNewProductDocument = gql`\n    mutation AddNewProduct($name: String!, $position: Int!, $stock: Boolean!, $costPer: String!, $price: BigDecimal!, $categoryId: String!, $description: String!) {\n  saveNewProduct(productInputDTO: {name: $name, price: $price, stock: $stock, costPer: $costPer, position: $position, categoryId: $categoryId, description: $description}) {\n    id\n  }\n}\n    `;\nexport type AddNewProductMutationFn = Apollo.MutationFunction<AddNewProductMutation, AddNewProductMutationVariables>;\n\n/**\n * __useAddNewProductMutation__\n *\n * To run a mutation, you first call `useAddNewProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNewProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNewProductMutation, { data, loading, error }] = useAddNewProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      position: // value for 'position'\n *      stock: // value for 'stock'\n *      costPer: // value for 'costPer'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useAddNewProductMutation(baseOptions?: Apollo.MutationHookOptions<AddNewProductMutation, AddNewProductMutationVariables>) {\n        return Apollo.useMutation<AddNewProductMutation, AddNewProductMutationVariables>(AddNewProductDocument, baseOptions);\n      }\nexport type AddNewProductMutationHookResult = ReturnType<typeof useAddNewProductMutation>;\nexport type AddNewProductMutationResult = Apollo.MutationResult<AddNewProductMutation>;\nexport type AddNewProductMutationOptions = Apollo.BaseMutationOptions<AddNewProductMutation, AddNewProductMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($id: String!, $name: String!, $position: Int!, $stock: Boolean!, $costPer: String!, $price: BigDecimal!, $categoryId: String!, $description: String!) {\n  updateProduct(productId: $id, productInputDTO: {name: $name, stock: $stock, price: $price, costPer: $costPer, position: $position, categoryId: $categoryId, description: $description}) {\n    id\n  }\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      position: // value for 'position'\n *      stock: // value for 'stock'\n *      costPer: // value for 'costPer'\n *      price: // value for 'price'\n *      categoryId: // value for 'categoryId'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\nexport const AddNewImagesDocument = gql`\n    mutation AddNewImages($images: [Upload!]!, $productId: String!) {\n  addNewImages(images: $images, productId: $productId) {\n    id\n    images {\n      id\n    }\n  }\n}\n    `;\nexport type AddNewImagesMutationFn = Apollo.MutationFunction<AddNewImagesMutation, AddNewImagesMutationVariables>;\n\n/**\n * __useAddNewImagesMutation__\n *\n * To run a mutation, you first call `useAddNewImagesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNewImagesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNewImagesMutation, { data, loading, error }] = useAddNewImagesMutation({\n *   variables: {\n *      images: // value for 'images'\n *      productId: // value for 'productId'\n *   },\n * });\n */\nexport function useAddNewImagesMutation(baseOptions?: Apollo.MutationHookOptions<AddNewImagesMutation, AddNewImagesMutationVariables>) {\n        return Apollo.useMutation<AddNewImagesMutation, AddNewImagesMutationVariables>(AddNewImagesDocument, baseOptions);\n      }\nexport type AddNewImagesMutationHookResult = ReturnType<typeof useAddNewImagesMutation>;\nexport type AddNewImagesMutationResult = Apollo.MutationResult<AddNewImagesMutation>;\nexport type AddNewImagesMutationOptions = Apollo.BaseMutationOptions<AddNewImagesMutation, AddNewImagesMutationVariables>;\nexport const ProductDocument = gql`\n    query Product($id: String!) {\n  productById(productId: $id) {\n    ...ProductItem\n  }\n}\n    ${ProductItemFragmentDoc}`;\n\n/**\n * __useProductQuery__\n *\n * To run a query within a React component, call `useProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProductQuery(baseOptions?: Apollo.QueryHookOptions<ProductQuery, ProductQueryVariables>) {\n        return Apollo.useQuery<ProductQuery, ProductQueryVariables>(ProductDocument, baseOptions);\n      }\nexport function useProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductQuery, ProductQueryVariables>) {\n          return Apollo.useLazyQuery<ProductQuery, ProductQueryVariables>(ProductDocument, baseOptions);\n        }\nexport type ProductQueryHookResult = ReturnType<typeof useProductQuery>;\nexport type ProductLazyQueryHookResult = ReturnType<typeof useProductLazyQuery>;\nexport type ProductQueryResult = Apollo.QueryResult<ProductQuery, ProductQueryVariables>;\nexport const DeleteProductDocument = gql`\n    mutation DeleteProduct($id: String!) {\n  deleteProduct(productId: $id) {\n    status\n  }\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;","import React, { ReactNode, useMemo } from \"react\";\n\nimport { CategoryItemFragment, ProductItemFragment, useCategoriesAndProductsQuery } from \"generated/graphql\";\n\ntype Props = {\n  children: ReactNode;\n};\n\ntype DataContext = {\n  dataProviderLoading: boolean;\n  products: ProductItemFragment[];\n  categories: CategoryItemFragment[];\n  refetchCategoriesAndProducts: () => any;\n};\n\nexport const DataContext = React.createContext<DataContext>({\n  products: [],\n  categories: [],\n  dataProviderLoading: false,\n  refetchCategoriesAndProducts: () => {},\n});\n\nexport function sorterFunction<T extends { name: string }>(a: T, b: T) {\n  if (a.name > b.name) {\n    return 1;\n  }\n  if (a.name < b.name) {\n    return -1;\n  }\n  return 0;\n}\n\nconst DataProvider = ({ children }: Props) => {\n  const { data, refetch, loading } = useCategoriesAndProductsQuery();\n  const { products, categories } = useMemo(() => {\n    if (data?.listCategory && data.listProduct) {\n      const { listCategory, listProduct } = data;\n      return {\n        products: listProduct,\n        categories: listCategory,\n      };\n    }\n    return { products: [], categories: [] };\n  }, [data]);\n\n  return (\n    <DataContext.Provider\n      value={{\n        products,\n        categories,\n        dataProviderLoading: loading,\n        refetchCategoriesAndProducts: refetch,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport default DataProvider;\n","module.exports = __webpack_public_path__ + \"static/media/logo.b075f1eb.svg\";","module.exports = __webpack_public_path__ + \"static/media/success.d93dc153.svg\";"],"sourceRoot":""}